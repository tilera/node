. //usr/include/string.h
.. //usr/include/features.h
... //usr/include/sys/cdefs.h
.... //usr/include/bits/wordsize.h
... //usr/include/gnu/stubs.h
.. /usr/lib/gcc/tilegx-redhat-linux/4.4.7/include/stddef.h
.. //usr/include/xlocale.h
odbc_result.cpp:18:16: error: v8.h: No such file or directory
odbc_result.cpp:19:18: error: node.h: No such file or directory
odbc_result.cpp:20:26: error: node_version.h: No such file or directory
. //usr/include/time.h
.. /usr/lib/gcc/tilegx-redhat-linux/4.4.7/include/stddef.h
.. //usr/include/bits/time.h
.. //usr/include/bits/types.h
... //usr/include/bits/wordsize.h
... //usr/include/bits/typesizes.h
odbc_result.cpp:22:16: error: uv.h: No such file or directory
. odbc.h
.. //usr/include/wchar.h
... //usr/include/stdio.h
... /usr/lib/gcc/tilegx-redhat-linux/4.4.7/include/stdarg.h
... //usr/include/bits/wchar.h
... /usr/lib/gcc/tilegx-redhat-linux/4.4.7/include/stddef.h
.. //usr/include/stdlib.h
... /usr/lib/gcc/tilegx-redhat-linux/4.4.7/include/stddef.h
... //usr/include/bits/waitflags.h
... //usr/include/bits/waitstatus.h
.... //usr/include/endian.h
..... //usr/include/bits/endian.h
..... //usr/include/bits/byteswap.h
... //usr/include/sys/types.h
.... /usr/lib/gcc/tilegx-redhat-linux/4.4.7/include/stddef.h
.... //usr/include/sys/select.h
..... //usr/include/bits/select.h
..... //usr/include/bits/sigset.h
..... //usr/include/bits/time.h
.... //usr/include/sys/sysmacros.h
.... //usr/include/bits/pthreadtypes.h
..... //usr/include/bits/wordsize.h
... //usr/include/alloca.h
.... /usr/lib/gcc/tilegx-redhat-linux/4.4.7/include/stddef.h
.. //usr/include/sql.h
... //usr/include/sqltypes.h
.... //usr/include/unixodbc_conf.h
# 1 "odbc_result.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "odbc_result.cpp"
# 17 "odbc_result.cpp"
# 1 "//usr/include/string.h" 1 3 4
# 27 "//usr/include/string.h" 3 4
# 1 "//usr/include/features.h" 1 3 4
# 361 "//usr/include/features.h" 3 4
# 1 "//usr/include/sys/cdefs.h" 1 3 4
# 365 "//usr/include/sys/cdefs.h" 3 4
# 1 "//usr/include/bits/wordsize.h" 1 3 4
# 366 "//usr/include/sys/cdefs.h" 2 3 4
# 362 "//usr/include/features.h" 2 3 4
# 385 "//usr/include/features.h" 3 4
# 1 "//usr/include/gnu/stubs.h" 1 3 4
# 386 "//usr/include/features.h" 2 3 4
# 28 "//usr/include/string.h" 2 3 4

extern "C" {




# 1 "/usr/lib/gcc/tilegx-redhat-linux/4.4.7/include/stddef.h" 1 3 4
# 211 "/usr/lib/gcc/tilegx-redhat-linux/4.4.7/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 35 "//usr/include/string.h" 2 3 4









extern void *memcpy (void *__restrict __dest,
       __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, __const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, __const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (__const void *__s1, __const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const void *memchr (__const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 93 "//usr/include/string.h" 3 4
}










extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const void *rawmemchr (__const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const void *memrchr (__const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern char *strcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, __const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (__const char *__s1, __const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));






# 1 "//usr/include/xlocale.h" 1 3 4
# 28 "//usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 163 "//usr/include/string.h" 2 3 4


extern int strcoll_l (__const char *__s1, __const char *__s2, __locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, __const char *__src, size_t __n,
    __locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (__const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (__const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 210 "//usr/include/string.h" 3 4



extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *strchr (__const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 233 "//usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *strrchr (__const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 260 "//usr/include/string.h" 3 4
}










extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const char *strchrnul (__const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern size_t strcspn (__const char *__s, __const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (__const char *__s, __const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, __const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern __const char *strpbrk (__const char *__s, __const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 312 "//usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strstr (char *__haystack, __const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern __const char *strstr (__const char *__haystack,
        __const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 340 "//usr/include/string.h" 3 4
}







extern char *strtok (char *__restrict __s, __const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    __const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, __const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, __const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" __const char *strcasestr (__const char *__haystack,
           __const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 382 "//usr/include/string.h" 3 4
extern void *memmem (__const void *__haystack, size_t __haystacklen,
       __const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (__const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (__const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) throw ();

# 438 "//usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));





extern char *strerror_l (int __errnum, __locale_t __l) throw ();





extern void __bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern void bcopy (__const void *__src, void *__dest, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int bcmp (__const void *__s1, __const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *index (__const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 487 "//usr/include/string.h" 3 4
}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *rindex (__const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 515 "//usr/include/string.h" 3 4
}







extern int ffs (int __i) throw () __attribute__ ((__const__));




extern int ffsl (long int __l) throw () __attribute__ ((__const__));

__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));




extern int strcasecmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (__const char *__s1, __const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (__const char *__s1, __const char *__s2,
    __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (__const char *__s1, __const char *__s2,
     size_t __n, __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       __const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" __const char *basename (__const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 646 "//usr/include/string.h" 3 4
}
# 18 "odbc_result.cpp" 2



# 1 "//usr/include/time.h" 1 3 4
# 30 "//usr/include/time.h" 3 4
extern "C" {







# 1 "/usr/lib/gcc/tilegx-redhat-linux/4.4.7/include/stddef.h" 1 3 4
# 39 "//usr/include/time.h" 2 3 4



# 1 "//usr/include/bits/time.h" 1 3 4
# 43 "//usr/include/time.h" 2 3 4
# 56 "//usr/include/time.h" 3 4
# 1 "//usr/include/bits/types.h" 1 3 4
# 28 "//usr/include/bits/types.h" 3 4
# 1 "//usr/include/bits/wordsize.h" 1 3 4
# 29 "//usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 131 "//usr/include/bits/types.h" 3 4
# 1 "//usr/include/bits/typesizes.h" 1 3 4
# 132 "//usr/include/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef long int __swblk_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;

typedef long int __ssize_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 57 "//usr/include/time.h" 2 3 4



typedef __clock_t clock_t;



# 74 "//usr/include/time.h" 3 4


typedef __time_t time_t;



# 92 "//usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 104 "//usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 120 "//usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    long int tv_nsec;
  };








struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  __const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;





typedef __pid_t pid_t;








extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   __const char *__restrict __format,
   __const struct tm *__restrict __tp) throw ();





extern char *strptime (__const char *__restrict __s,
         __const char *__restrict __fmt, struct tm *__tp)
     throw ();







extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     __const char *__restrict __format,
     __const struct tm *__restrict __tp,
     __locale_t __loc) throw ();



extern char *strptime_l (__const char *__restrict __s,
    __const char *__restrict __fmt, struct tm *__tp,
    __locale_t __loc) throw ();






extern struct tm *gmtime (__const time_t *__timer) throw ();



extern struct tm *localtime (__const time_t *__timer) throw ();





extern struct tm *gmtime_r (__const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (__const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();





extern char *asctime (__const struct tm *__tp) throw ();


extern char *ctime (__const time_t *__timer) throw ();







extern char *asctime_r (__const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (__const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;





extern int stime (__const time_t *__when) throw ();
# 313 "//usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 328 "//usr/include/time.h" 3 4
extern int nanosleep (__const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, __const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       __const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     __const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();
# 390 "//usr/include/time.h" 3 4
extern int getdate_err;
# 399 "//usr/include/time.h" 3 4
extern struct tm *getdate (__const char *__string);
# 413 "//usr/include/time.h" 3 4
extern int getdate_r (__const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 22 "odbc_result.cpp" 2


# 1 "odbc.h" 1
# 23 "odbc.h"
# 1 "//usr/include/wchar.h" 1 3 4
# 37 "//usr/include/wchar.h" 3 4
# 1 "//usr/include/stdio.h" 1 3 4
# 45 "//usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 65 "//usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 38 "//usr/include/wchar.h" 2 3 4


# 1 "/usr/lib/gcc/tilegx-redhat-linux/4.4.7/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/tilegx-redhat-linux/4.4.7/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 41 "//usr/include/wchar.h" 2 3 4

# 1 "//usr/include/bits/wchar.h" 1 3 4
# 43 "//usr/include/wchar.h" 2 3 4
# 52 "//usr/include/wchar.h" 3 4
# 1 "/usr/lib/gcc/tilegx-redhat-linux/4.4.7/include/stddef.h" 1 3 4
# 352 "/usr/lib/gcc/tilegx-redhat-linux/4.4.7/include/stddef.h" 3 4
typedef unsigned int wint_t;
# 53 "//usr/include/wchar.h" 2 3 4
# 83 "//usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 104 "//usr/include/wchar.h" 3 4


typedef __mbstate_t mbstate_t;



# 129 "//usr/include/wchar.h" 3 4
extern "C" {




struct tm;









extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   __const wchar_t *__restrict __src) throw ();

extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    __const wchar_t *__restrict __src, size_t __n)
     throw ();


extern wchar_t *wcscat (wchar_t *__restrict __dest,
   __const wchar_t *__restrict __src) throw ();

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    __const wchar_t *__restrict __src, size_t __n)
     throw ();


extern int wcscmp (__const wchar_t *__s1, __const wchar_t *__s2)
     throw () __attribute__ ((__pure__));

extern int wcsncmp (__const wchar_t *__s1, __const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__));




extern int wcscasecmp (__const wchar_t *__s1, __const wchar_t *__s2) throw ();


extern int wcsncasecmp (__const wchar_t *__s1, __const wchar_t *__s2,
   size_t __n) throw ();





extern int wcscasecmp_l (__const wchar_t *__s1, __const wchar_t *__s2,
    __locale_t __loc) throw ();

extern int wcsncasecmp_l (__const wchar_t *__s1, __const wchar_t *__s2,
     size_t __n, __locale_t __loc) throw ();





extern int wcscoll (__const wchar_t *__s1, __const wchar_t *__s2) throw ();



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         __const wchar_t *__restrict __s2, size_t __n) throw ();








extern int wcscoll_l (__const wchar_t *__s1, __const wchar_t *__s2,
        __locale_t __loc) throw ();




extern size_t wcsxfrm_l (wchar_t *__s1, __const wchar_t *__s2,
    size_t __n, __locale_t __loc) throw ();


extern wchar_t *wcsdup (__const wchar_t *__s) throw () __attribute__ ((__malloc__));





extern "C++" wchar_t *wcschr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wcschr (__const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsrchr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wcsrchr (__const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));









extern wchar_t *wcschrnul (__const wchar_t *__s, wchar_t __wc)
     throw () __attribute__ ((__pure__));





extern size_t wcscspn (__const wchar_t *__wcs, __const wchar_t *__reject)
     throw () __attribute__ ((__pure__));


extern size_t wcsspn (__const wchar_t *__wcs, __const wchar_t *__accept)
     throw () __attribute__ ((__pure__));


extern "C++" wchar_t *wcspbrk (wchar_t *__wcs, __const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wcspbrk (__const wchar_t *__wcs,
           __const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsstr (wchar_t *__haystack, __const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wcsstr (__const wchar_t *__haystack,
          __const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));






extern wchar_t *wcstok (wchar_t *__restrict __s,
   __const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) throw ();


extern size_t wcslen (__const wchar_t *__s) throw () __attribute__ ((__pure__));





extern "C++" wchar_t *wcswcs (wchar_t *__haystack, __const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wcswcs (__const wchar_t *__haystack,
          __const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
# 303 "//usr/include/wchar.h" 3 4
extern size_t wcsnlen (__const wchar_t *__s, size_t __maxlen)
     throw () __attribute__ ((__pure__));






extern "C++" wchar_t *wmemchr (wchar_t *__s, wchar_t __c, size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wmemchr (__const wchar_t *__s, wchar_t __c,
           size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));






extern int wmemcmp (__const wchar_t *__restrict __s1,
      __const wchar_t *__restrict __s2, size_t __n)
     throw () __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    __const wchar_t *__restrict __s2, size_t __n) throw ();



extern wchar_t *wmemmove (wchar_t *__s1, __const wchar_t *__s2, size_t __n)
     throw ();


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) throw ();





extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     __const wchar_t *__restrict __s2, size_t __n)
     throw ();






extern wint_t btowc (int __c) throw ();



extern int wctob (wint_t __c) throw ();



extern int mbsinit (__const mbstate_t *__ps) throw () __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         __const char *__restrict __s, size_t __n,
         mbstate_t *__p) throw ();


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) throw ();


extern size_t __mbrlen (__const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) throw ();
extern size_t mbrlen (__const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) throw ();

# 403 "//usr/include/wchar.h" 3 4



extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    __const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();



extern size_t wcsrtombs (char *__restrict __dst,
    __const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();






extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     __const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) throw ();



extern size_t wcsnrtombs (char *__restrict __dst,
     __const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) throw ();






extern int wcwidth (wchar_t __c) throw ();



extern int wcswidth (__const wchar_t *__s, size_t __n) throw ();






extern double wcstod (__const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) throw ();





extern float wcstof (__const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
extern long double wcstold (__const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();







extern long int wcstol (__const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) throw ();



extern unsigned long int wcstoul (__const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();






__extension__
extern long long int wcstoll (__const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstoull (__const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) throw ();






__extension__
extern long long int wcstoq (__const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstouq (__const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) throw ();
# 528 "//usr/include/wchar.h" 3 4
extern long int wcstol_l (__const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     __locale_t __loc) throw ();

extern unsigned long int wcstoul_l (__const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, __locale_t __loc) throw ();

__extension__
extern long long int wcstoll_l (__const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, __locale_t __loc) throw ();

__extension__
extern unsigned long long int wcstoull_l (__const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, __locale_t __loc)
     throw ();

extern double wcstod_l (__const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, __locale_t __loc)
     throw ();

extern float wcstof_l (__const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, __locale_t __loc)
     throw ();

extern long double wcstold_l (__const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         __locale_t __loc) throw ();




extern wchar_t *wcpcpy (wchar_t *__restrict __dest,
   __const wchar_t *__restrict __src) throw ();



extern wchar_t *wcpncpy (wchar_t *__restrict __dest,
    __const wchar_t *__restrict __src, size_t __n)
     throw ();
# 578 "//usr/include/wchar.h" 3 4
extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) throw ();






extern int fwide (__FILE *__fp, int __mode) throw ();






extern int fwprintf (__FILE *__restrict __stream,
       __const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (__const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       __const wchar_t *__restrict __format, ...)
     throw () ;





extern int vfwprintf (__FILE *__restrict __s,
        __const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (__const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        __const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream,
      __const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (__const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (__const wchar_t *__restrict __s,
      __const wchar_t *__restrict __format, ...)
     throw () ;
# 678 "//usr/include/wchar.h" 3 4









extern int vfwscanf (__FILE *__restrict __s,
       __const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (__const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (__const wchar_t *__restrict __s,
       __const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     throw () ;
# 734 "//usr/include/wchar.h" 3 4









extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (__const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);

# 799 "//usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 825 "//usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 835 "//usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (__const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);







extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   __const wchar_t *__restrict __format,
   __const struct tm *__restrict __tp) throw ();







extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     __const wchar_t *__restrict __format,
     __const struct tm *__restrict __tp,
     __locale_t __loc) throw ();
# 889 "//usr/include/wchar.h" 3 4
}
# 24 "odbc.h" 2

# 1 "//usr/include/stdlib.h" 1 3 4
# 33 "//usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/tilegx-redhat-linux/4.4.7/include/stddef.h" 1 3 4
# 34 "//usr/include/stdlib.h" 2 3 4

extern "C" {






# 1 "//usr/include/bits/waitflags.h" 1 3 4
# 43 "//usr/include/stdlib.h" 2 3 4
# 1 "//usr/include/bits/waitstatus.h" 1 3 4
# 65 "//usr/include/bits/waitstatus.h" 3 4
# 1 "//usr/include/endian.h" 1 3 4
# 37 "//usr/include/endian.h" 3 4
# 1 "//usr/include/bits/endian.h" 1 3 4
# 38 "//usr/include/endian.h" 2 3 4
# 61 "//usr/include/endian.h" 3 4
# 1 "//usr/include/bits/byteswap.h" 1 3 4
# 62 "//usr/include/endian.h" 2 3 4
# 66 "//usr/include/bits/waitstatus.h" 2 3 4

union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 44 "//usr/include/stdlib.h" 2 3 4
# 96 "//usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 140 "//usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;




extern double atof (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (__const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern float strtof (__const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1))) ;

extern long double strtold (__const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern long int strtol (__const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

extern unsigned long int strtoul (__const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;




__extension__
extern long long int strtoq (__const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtouq (__const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;





__extension__
extern long long int strtoll (__const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtoull (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

# 240 "//usr/include/stdlib.h" 3 4
extern long int strtol_l (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4))) ;

extern unsigned long int strtoul_l (__const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern long long int strtoll_l (__const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern unsigned long long int strtoull_l (__const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

extern double strtod_l (__const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;

extern float strtof_l (__const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;

extern long double strtold_l (__const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;
# 311 "//usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (__const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "//usr/include/sys/types.h" 1 3 4
# 28 "//usr/include/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;
# 105 "//usr/include/sys/types.h" 3 4
typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 137 "//usr/include/sys/types.h" 3 4
typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/tilegx-redhat-linux/4.4.7/include/stddef.h" 1 3 4
# 148 "//usr/include/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 195 "//usr/include/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 220 "//usr/include/sys/types.h" 3 4
# 1 "//usr/include/sys/select.h" 1 3 4
# 31 "//usr/include/sys/select.h" 3 4
# 1 "//usr/include/bits/select.h" 1 3 4
# 32 "//usr/include/sys/select.h" 2 3 4


# 1 "//usr/include/bits/sigset.h" 1 3 4
# 24 "//usr/include/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 35 "//usr/include/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;







# 1 "//usr/include/bits/time.h" 1 3 4
# 75 "//usr/include/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 47 "//usr/include/sys/select.h" 2 3 4
# 55 "//usr/include/sys/select.h" 3 4
typedef long int __fd_mask;
# 67 "//usr/include/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 99 "//usr/include/sys/select.h" 3 4
extern "C" {
# 109 "//usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 121 "//usr/include/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);


}
# 221 "//usr/include/sys/types.h" 2 3 4


# 1 "//usr/include/sys/sysmacros.h" 1 3 4
# 30 "//usr/include/sys/sysmacros.h" 3 4
__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     throw ();
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     throw ();
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     throw ();
# 224 "//usr/include/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 263 "//usr/include/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "//usr/include/bits/pthreadtypes.h" 1 3 4
# 24 "//usr/include/bits/pthreadtypes.h" 3 4
# 1 "//usr/include/bits/wordsize.h" 1 3 4
# 25 "//usr/include/bits/pthreadtypes.h" 2 3 4
# 51 "//usr/include/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


typedef union
{
  char __size[56];
  long int __align;
} pthread_attr_t;



typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 77 "//usr/include/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    int __spins;
    __pthread_list_t __list;
# 102 "//usr/include/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    unsigned long int __pad1;
    unsigned long int __pad2;


    unsigned int __flags;
  } __data;
# 188 "//usr/include/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 272 "//usr/include/sys/types.h" 2 3 4


}
# 321 "//usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();




extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    unsigned long long int __a;
  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;










extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) throw ();




extern void cfree (void *__ptr) throw ();



# 1 "//usr/include/alloca.h" 1 3 4
# 25 "//usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/tilegx-redhat-linux/4.4.7/include/stddef.h" 1 3 4
# 26 "//usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 498 "//usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));






extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));









extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) throw () __attribute__ ((__noreturn__));







extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));







extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));






extern char *getenv (__const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;




extern char *__secure_getenv (__const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (__const char *__name, __const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (__const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 606 "//usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 620 "//usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 630 "//usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 642 "//usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 652 "//usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 663 "//usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 674 "//usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 684 "//usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 694 "//usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 706 "//usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;









extern int system (__const char *__command) ;






extern char *canonicalize_file_name (__const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 734 "//usr/include/stdlib.h" 3 4
extern char *realpath (__const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (__const void *, __const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (__const void *, __const void *, void *);





extern void *bsearch (__const void *__key, __const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;



extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;

# 808 "//usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));







extern int mblen (__const char *__s, size_t __n) throw () ;


extern int mbtowc (wchar_t *__restrict __pwc,
     __const char *__restrict __s, size_t __n) throw () ;


extern int wctomb (char *__s, wchar_t __wchar) throw () ;



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   __const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   __const wchar_t *__restrict __pwcs, size_t __n)
     throw ();








extern int rpmatch (__const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 896 "//usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *__const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (__const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 964 "//usr/include/stdlib.h" 3 4
}
# 26 "odbc.h" 2



# 1 "//usr/include/sql.h" 1 3 4
# 19 "//usr/include/sql.h" 3 4
# 1 "//usr/include/sqltypes.h" 1 3 4
# 43 "//usr/include/sqltypes.h" 3 4
extern "C" {
# 52 "//usr/include/sqltypes.h" 3 4
# 1 "//usr/include/unixodbc_conf.h" 1 3 4
# 53 "//usr/include/sqltypes.h" 2 3 4
# 72 "//usr/include/sqltypes.h" 3 4
typedef void* HWND;
typedef char CHAR;
# 89 "//usr/include/sqltypes.h" 3 4
typedef char TCHAR;



typedef void VOID;


typedef unsigned short WORD;



typedef unsigned int DWORD;

typedef unsigned char BYTE;




typedef unsigned short WCHAR;


typedef WCHAR* LPWSTR;
typedef const char* LPCSTR;
typedef const WCHAR* LPCWSTR;
typedef TCHAR* LPTSTR;
typedef char* LPSTR;
typedef DWORD* LPDWORD;

typedef void* HINSTANCE;







typedef unsigned char SQLCHAR;


typedef unsigned char SQLDATE;
typedef unsigned char SQLDECIMAL;
typedef double SQLDOUBLE;
typedef double SQLFLOAT;
# 160 "//usr/include/sqltypes.h" 3 4
typedef int SQLINTEGER;
typedef unsigned int SQLUINTEGER;
typedef long SQLLEN;
typedef unsigned long SQLULEN;
typedef unsigned long SQLSETPOSIROW;
# 173 "//usr/include/sqltypes.h" 3 4
typedef SQLULEN SQLROWCOUNT;
typedef SQLULEN SQLROWSETSIZE;
typedef SQLULEN SQLTRANSID;
typedef SQLLEN SQLROWOFFSET;
# 191 "//usr/include/sqltypes.h" 3 4
typedef unsigned char SQLNUMERIC;


typedef void * SQLPOINTER;


typedef float SQLREAL;


typedef signed short int SQLSMALLINT;
typedef unsigned short SQLUSMALLINT;


typedef unsigned char SQLTIME;
typedef unsigned char SQLTIMESTAMP;
typedef unsigned char SQLVARCHAR;


typedef SQLSMALLINT SQLRETURN;


typedef void * SQLHANDLE;
typedef SQLHANDLE SQLHENV;
typedef SQLHANDLE SQLHDBC;
typedef SQLHANDLE SQLHSTMT;
typedef SQLHANDLE SQLHDESC;
# 235 "//usr/include/sqltypes.h" 3 4
typedef SQLHANDLE HENV;
typedef SQLHANDLE HDBC;
typedef SQLHANDLE HSTMT;
# 250 "//usr/include/sqltypes.h" 3 4
typedef unsigned char UCHAR;
typedef signed char SCHAR;
typedef SCHAR SQLSCHAR;




typedef int SDWORD;
typedef unsigned int UDWORD;

typedef signed short int SWORD;
typedef unsigned short int UWORD;
typedef unsigned int UINT;
typedef signed long SLONG;
typedef signed short SSHORT;
typedef unsigned long ULONG;
typedef unsigned short USHORT;
typedef double SDOUBLE;
typedef double LDOUBLE;
typedef float SFLOAT;
typedef void* PTR;
typedef signed short RETCODE;
typedef void* SQLHWND;
# 281 "//usr/include/sqltypes.h" 3 4
typedef struct tagDATE_STRUCT
{
        SQLSMALLINT year;
        SQLUSMALLINT month;
        SQLUSMALLINT day;
} DATE_STRUCT;


typedef DATE_STRUCT SQL_DATE_STRUCT;


typedef struct tagTIME_STRUCT
{
        SQLUSMALLINT hour;
        SQLUSMALLINT minute;
        SQLUSMALLINT second;
} TIME_STRUCT;


typedef TIME_STRUCT SQL_TIME_STRUCT;


typedef struct tagTIMESTAMP_STRUCT
{
        SQLSMALLINT year;
        SQLUSMALLINT month;
        SQLUSMALLINT day;
        SQLUSMALLINT hour;
        SQLUSMALLINT minute;
        SQLUSMALLINT second;
        SQLUINTEGER fraction;
} TIMESTAMP_STRUCT;


typedef TIMESTAMP_STRUCT SQL_TIMESTAMP_STRUCT;




typedef enum
{
 SQL_IS_YEAR = 1,
 SQL_IS_MONTH = 2,
 SQL_IS_DAY = 3,
 SQL_IS_HOUR = 4,
 SQL_IS_MINUTE = 5,
 SQL_IS_SECOND = 6,
 SQL_IS_YEAR_TO_MONTH = 7,
 SQL_IS_DAY_TO_HOUR = 8,
 SQL_IS_DAY_TO_MINUTE = 9,
 SQL_IS_DAY_TO_SECOND = 10,
 SQL_IS_HOUR_TO_MINUTE = 11,
 SQL_IS_HOUR_TO_SECOND = 12,
 SQL_IS_MINUTE_TO_SECOND = 13
} SQLINTERVAL;




typedef struct tagSQL_YEAR_MONTH
{
  SQLUINTEGER year;
  SQLUINTEGER month;
} SQL_YEAR_MONTH_STRUCT;

typedef struct tagSQL_DAY_SECOND
{
  SQLUINTEGER day;
  SQLUINTEGER hour;
  SQLUINTEGER minute;
  SQLUINTEGER second;
  SQLUINTEGER fraction;
} SQL_DAY_SECOND_STRUCT;

typedef struct tagSQL_INTERVAL_STRUCT
{
 SQLINTERVAL interval_type;
 SQLSMALLINT interval_sign;
 union {
  SQL_YEAR_MONTH_STRUCT year_month;
  SQL_DAY_SECOND_STRUCT day_second;
 } intval;

} SQL_INTERVAL_STRUCT;
# 404 "//usr/include/sqltypes.h" 3 4
typedef long SQLBIGINT;


typedef unsigned long SQLUBIGINT;
# 416 "//usr/include/sqltypes.h" 3 4
typedef struct tagSQL_NUMERIC_STRUCT
{
 SQLCHAR precision;
 SQLSCHAR scale;
 SQLCHAR sign;
 SQLCHAR val[16];
} SQL_NUMERIC_STRUCT;
# 439 "//usr/include/sqltypes.h" 3 4
typedef struct tagSQLGUID
{
    DWORD Data1;
    WORD Data2;
    WORD Data3;
    BYTE Data4[ 8 ];
} SQLGUID;



typedef SQLULEN BOOKMARK;

typedef WCHAR SQLWCHAR;




typedef SQLCHAR SQLTCHAR;



}
# 20 "//usr/include/sql.h" 2 3 4



extern "C" {
# 569 "//usr/include/sql.h" 3 4
    SQLRETURN SQLAllocConnect(SQLHENV EnvironmentHandle,
                                       SQLHDBC *ConnectionHandle);

    SQLRETURN SQLAllocEnv(SQLHENV *EnvironmentHandle);


    SQLRETURN SQLAllocHandle(SQLSMALLINT HandleType,
                                      SQLHANDLE InputHandle, SQLHANDLE *OutputHandle);


    SQLRETURN SQLAllocStmt(SQLHDBC ConnectionHandle,
                                    SQLHSTMT *StatementHandle);

    SQLRETURN SQLBindCol(SQLHSTMT StatementHandle,
                                  SQLUSMALLINT ColumnNumber, SQLSMALLINT TargetType,
                                  SQLPOINTER TargetValue, SQLLEN BufferLength,
                                  SQLLEN *StrLen_or_Ind);


    SQLRETURN SQLBindParam(SQLHSTMT StatementHandle,
                                    SQLUSMALLINT ParameterNumber, SQLSMALLINT ValueType,
                                    SQLSMALLINT ParameterType, SQLULEN LengthPrecision,
                                    SQLSMALLINT ParameterScale, SQLPOINTER ParameterValue,
                                    SQLLEN *StrLen_or_Ind);


    SQLRETURN SQLCancel(SQLHSTMT StatementHandle);


    SQLRETURN SQLCloseCursor(SQLHSTMT StatementHandle);

    SQLRETURN SQLColAttribute(SQLHSTMT StatementHandle,
                                        SQLUSMALLINT ColumnNumber, SQLUSMALLINT FieldIdentifier,
                                        SQLPOINTER CharacterAttribute, SQLSMALLINT BufferLength,
                                        SQLSMALLINT *StringLength, SQLLEN *NumericAttribute
                                                          );





    SQLRETURN SQLColumns(SQLHSTMT StatementHandle,
                                  SQLCHAR *CatalogName, SQLSMALLINT NameLength1,
                                  SQLCHAR *SchemaName, SQLSMALLINT NameLength2,
                                  SQLCHAR *TableName, SQLSMALLINT NameLength3,
                                  SQLCHAR *ColumnName, SQLSMALLINT NameLength4);


    SQLRETURN SQLConnect(SQLHDBC ConnectionHandle,
                                  SQLCHAR *ServerName, SQLSMALLINT NameLength1,
                                  SQLCHAR *UserName, SQLSMALLINT NameLength2,
                                  SQLCHAR *Authentication, SQLSMALLINT NameLength3);


    SQLRETURN SQLCopyDesc(SQLHDESC SourceDescHandle,
                                   SQLHDESC TargetDescHandle);


    SQLRETURN SQLDataSources(SQLHENV EnvironmentHandle,
                                      SQLUSMALLINT Direction, SQLCHAR *ServerName,
                                      SQLSMALLINT BufferLength1, SQLSMALLINT *NameLength1,
                                      SQLCHAR *Description, SQLSMALLINT BufferLength2,
                                      SQLSMALLINT *NameLength2);

    SQLRETURN SQLDescribeCol(SQLHSTMT StatementHandle,
                                      SQLUSMALLINT ColumnNumber, SQLCHAR *ColumnName,
                                      SQLSMALLINT BufferLength, SQLSMALLINT *NameLength,
                                      SQLSMALLINT *DataType, SQLULEN *ColumnSize,
                                      SQLSMALLINT *DecimalDigits, SQLSMALLINT *Nullable);

    SQLRETURN SQLDisconnect(SQLHDBC ConnectionHandle);


    SQLRETURN SQLEndTran(SQLSMALLINT HandleType, SQLHANDLE Handle,
                                  SQLSMALLINT CompletionType);


    SQLRETURN SQLError(SQLHENV EnvironmentHandle,
                                SQLHDBC ConnectionHandle, SQLHSTMT StatementHandle,
                                SQLCHAR *Sqlstate, SQLINTEGER *NativeError,
                                SQLCHAR *MessageText, SQLSMALLINT BufferLength,
                                SQLSMALLINT *TextLength);

    SQLRETURN SQLExecDirect(SQLHSTMT StatementHandle,
                                     SQLCHAR *StatementText, SQLINTEGER TextLength);

    SQLRETURN SQLExecute(SQLHSTMT StatementHandle);

    SQLRETURN SQLFetch(SQLHSTMT StatementHandle);


    SQLRETURN SQLFetchScroll(SQLHSTMT StatementHandle,
                                      SQLSMALLINT FetchOrientation, SQLLEN FetchOffset);


    SQLRETURN SQLFreeConnect(SQLHDBC ConnectionHandle);

    SQLRETURN SQLFreeEnv(SQLHENV EnvironmentHandle);


    SQLRETURN SQLFreeHandle(SQLSMALLINT HandleType, SQLHANDLE Handle);


    SQLRETURN SQLFreeStmt(SQLHSTMT StatementHandle,
                                   SQLUSMALLINT Option);


    SQLRETURN SQLGetConnectAttr(SQLHDBC ConnectionHandle,
                                         SQLINTEGER Attribute, SQLPOINTER Value,
                                         SQLINTEGER BufferLength, SQLINTEGER *StringLength);


    SQLRETURN SQLGetConnectOption(SQLHDBC ConnectionHandle,
                                           SQLUSMALLINT Option, SQLPOINTER Value);

    SQLRETURN SQLGetCursorName(SQLHSTMT StatementHandle,
                                        SQLCHAR *CursorName, SQLSMALLINT BufferLength,
                                        SQLSMALLINT *NameLength);

    SQLRETURN SQLGetData(SQLHSTMT StatementHandle,
                                  SQLUSMALLINT ColumnNumber, SQLSMALLINT TargetType,
                                  SQLPOINTER TargetValue, SQLLEN BufferLength,
                                  SQLLEN *StrLen_or_Ind);


    SQLRETURN SQLGetDescField(SQLHDESC DescriptorHandle,
                                SQLSMALLINT RecNumber, SQLSMALLINT FieldIdentifier,
                                SQLPOINTER Value, SQLINTEGER BufferLength,
                                SQLINTEGER *StringLength);

    SQLRETURN SQLGetDescRec(SQLHDESC DescriptorHandle,
                                     SQLSMALLINT RecNumber, SQLCHAR *Name,
                                     SQLSMALLINT BufferLength, SQLSMALLINT *StringLength,
                                     SQLSMALLINT *Type, SQLSMALLINT *SubType,
                                     SQLLEN *Length, SQLSMALLINT *Precision,
                                     SQLSMALLINT *Scale, SQLSMALLINT *Nullable);

    SQLRETURN SQLGetDiagField(SQLSMALLINT HandleType, SQLHANDLE Handle,
                                       SQLSMALLINT RecNumber, SQLSMALLINT DiagIdentifier,
                                       SQLPOINTER DiagInfo, SQLSMALLINT BufferLength,
                                       SQLSMALLINT *StringLength);

    SQLRETURN SQLGetDiagRec(SQLSMALLINT HandleType, SQLHANDLE Handle,
                                     SQLSMALLINT RecNumber, SQLCHAR *Sqlstate,
                                     SQLINTEGER *NativeError, SQLCHAR *MessageText,
                                     SQLSMALLINT BufferLength, SQLSMALLINT *TextLength);

    SQLRE.. //usr/include/sqltypes.h
.. //usr/include/sqlext.h
... //usr/include/sqlucode.h
.. //usr/include/sqlucode.h
. odbc_connection.h
. odbc_result.h
. odbc_statement.h
Multiple include guards may be useful for:
//usr/include/bits/byteswap.h
//usr/include/bits/endian.h
//usr/include/bits/select.h
//usr/include/bits/sigset.h
//usr/include/bits/typesizes.h
//usr/include/bits/waitflags.h
//usr/include/bits/waitstatus.h
//usr/include/gnu/stubs.h
//usr/include/unixodbc_conf.h
//usr/include/wchar.h
TURN SQLGetEnvAttr(SQLHENV EnvironmentHandle,
                                     SQLINTEGER Attribute, SQLPOINTER Value,
                                     SQLINTEGER BufferLength, SQLINTEGER *StringLength);


    SQLRETURN SQLGetFunctions(SQLHDBC ConnectionHandle,
                                       SQLUSMALLINT FunctionId, SQLUSMALLINT *Supported);

    SQLRETURN SQLGetInfo(SQLHDBC ConnectionHandle,
                                  SQLUSMALLINT InfoType, SQLPOINTER InfoValue,
                                  SQLSMALLINT BufferLength, SQLSMALLINT *StringLength);


    SQLRETURN SQLGetStmtAttr(SQLHSTMT StatementHandle,
                                      SQLINTEGER Attribute, SQLPOINTER Value,
                                      SQLINTEGER BufferLength, SQLINTEGER *StringLength);


    SQLRETURN SQLGetStmtOption(SQLHSTMT StatementHandle,
                                        SQLUSMALLINT Option, SQLPOINTER Value);

    SQLRETURN SQLGetTypeInfo(SQLHSTMT StatementHandle,
                                      SQLSMALLINT DataType);

    SQLRETURN SQLNumResultCols(SQLHSTMT StatementHandle,
                                        SQLSMALLINT *ColumnCount);

    SQLRETURN SQLParamData(SQLHSTMT StatementHandle,
                                    SQLPOINTER *Value);

    SQLRETURN SQLPrepare(SQLHSTMT StatementHandle,
                                  SQLCHAR *StatementText, SQLINTEGER TextLength);

    SQLRETURN SQLPutData(SQLHSTMT StatementHandle,
                                  SQLPOINTER Data, SQLLEN StrLen_or_Ind);

    SQLRETURN SQLRowCount(SQLHSTMT StatementHandle,
                                   SQLLEN *RowCount);


    SQLRETURN SQLSetConnectAttr(SQLHDBC ConnectionHandle,
                                         SQLINTEGER Attribute, SQLPOINTER Value,
                                         SQLINTEGER StringLength);


    SQLRETURN SQLSetConnectOption(SQLHDBC ConnectionHandle,
                                           SQLUSMALLINT Option, SQLULEN Value);

    SQLRETURN SQLSetCursorName(SQLHSTMT StatementHandle,
                                        SQLCHAR *CursorName, SQLSMALLINT NameLength);


    SQLRETURN SQLSetDescField(SQLHDESC DescriptorHandle,
                                       SQLSMALLINT RecNumber, SQLSMALLINT FieldIdentifier,
                                       SQLPOINTER Value, SQLINTEGER BufferLength);

    SQLRETURN SQLSetDescRec(SQLHDESC DescriptorHandle,
                                     SQLSMALLINT RecNumber, SQLSMALLINT Type,
                                     SQLSMALLINT SubType, SQLLEN Length,
                                     SQLSMALLINT Precision, SQLSMALLINT Scale,
                                     SQLPOINTER Data, SQLLEN *StringLength,
                                     SQLLEN *Indicator);

    SQLRETURN SQLSetEnvAttr(SQLHENV EnvironmentHandle,
                                     SQLINTEGER Attribute, SQLPOINTER Value,
                                     SQLINTEGER StringLength);


    SQLRETURN SQLSetParam(SQLHSTMT StatementHandle,
                                   SQLUSMALLINT ParameterNumber, SQLSMALLINT ValueType,
                                   SQLSMALLINT ParameterType, SQLULEN LengthPrecision,
                                   SQLSMALLINT ParameterScale, SQLPOINTER ParameterValue,
                                   SQLLEN *StrLen_or_Ind);


    SQLRETURN SQLSetStmtAttr(SQLHSTMT StatementHandle,
                                      SQLINTEGER Attribute, SQLPOINTER Value,
                                      SQLINTEGER StringLength);


    SQLRETURN SQLSetStmtOption(SQLHSTMT StatementHandle,
                                        SQLUSMALLINT Option, SQLULEN Value);

    SQLRETURN SQLSpecialColumns(SQLHSTMT StatementHandle,
                                         SQLUSMALLINT IdentifierType, SQLCHAR *CatalogName,
                                         SQLSMALLINT NameLength1, SQLCHAR *SchemaName,
                                         SQLSMALLINT NameLength2, SQLCHAR *TableName,
                                         SQLSMALLINT NameLength3, SQLUSMALLINT Scope,
                                         SQLUSMALLINT Nullable);

    SQLRETURN SQLStatistics(SQLHSTMT StatementHandle,
                                     SQLCHAR *CatalogName, SQLSMALLINT NameLength1,
                                     SQLCHAR *SchemaName, SQLSMALLINT NameLength2,
                                     SQLCHAR *TableName, SQLSMALLINT NameLength3,
                                     SQLUSMALLINT Unique, SQLUSMALLINT Reserved);

    SQLRETURN SQLTables(SQLHSTMT StatementHandle,
                                  SQLCHAR *CatalogName, SQLSMALLINT NameLength1,
                                  SQLCHAR *SchemaName, SQLSMALLINT NameLength2,
                                  SQLCHAR *TableName, SQLSMALLINT NameLength3,
                                  SQLCHAR *TableType, SQLSMALLINT NameLength4);

    SQLRETURN SQLTransact(SQLHENV EnvironmentHandle,
                                   SQLHDBC ConnectionHandle, SQLUSMALLINT CompletionType);


}
# 30 "odbc.h" 2
# 1 "//usr/include/sqltypes.h" 1 3 4
# 31 "odbc.h" 2
# 1 "//usr/include/sqlext.h" 1 3 4
# 47 "//usr/include/sqlext.h" 3 4
extern "C" {
# 1709 "//usr/include/sqlext.h" 3 4
SQLRETURN SQLDriverConnect(
    SQLHDBC hdbc,
    SQLHWND hwnd,
    SQLCHAR *szConnStrIn,
    SQLSMALLINT cbConnStrIn,
    SQLCHAR *szConnStrOut,
    SQLSMALLINT cbConnStrOutMax,
    SQLSMALLINT *pcbConnStrOut,
    SQLUSMALLINT fDriverCompletion);
# 1815 "//usr/include/sqlext.h" 3 4
SQLRETURN SQLBrowseConnect(
    SQLHDBC hdbc,
    SQLCHAR *szConnStrIn,
    SQLSMALLINT cbConnStrIn,
    SQLCHAR *szConnStrOut,
    SQLSMALLINT cbConnStrOutMax,
    SQLSMALLINT *pcbConnStrOut);


SQLRETURN SQLBulkOperations(
 SQLHSTMT StatementHandle,
 SQLSMALLINT Operation);


SQLRETURN SQLColAttributes(
    SQLHSTMT hstmt,
    SQLUSMALLINT icol,
    SQLUSMALLINT fDescType,
    SQLPOINTER rgbDesc,
    SQLSMALLINT cbDescMax,
    SQLSMALLINT *pcbDesc,
    SQLLEN *pfDesc);

SQLRETURN SQLColumnPrivileges(
    SQLHSTMT hstmt,
    SQLCHAR *szCatalogName,
    SQLSMALLINT cbCatalogName,
    SQLCHAR *szSchemaName,
    SQLSMALLINT cbSchemaName,
    SQLCHAR *szTableName,
    SQLSMALLINT cbTableName,
    SQLCHAR *szColumnName,
    SQLSMALLINT cbColumnName);

SQLRETURN SQLDescribeParam(
    SQLHSTMT hstmt,
    SQLUSMALLINT ipar,
    SQLSMALLINT *pfSqlType,
    SQLULEN *pcbParamDef,
    SQLSMALLINT *pibScale,
    SQLSMALLINT *pfNullable);

SQLRETURN SQLExtendedFetch(
    SQLHSTMT hstmt,
    SQLUSMALLINT fFetchType,
    SQLLEN irow,
    SQLULEN *pcrow,
    SQLUSMALLINT *rgfRowStatus);

SQLRETURN SQLForeignKeys(
    SQLHSTMT hstmt,
    SQLCHAR *szPkCatalogName,
    SQLSMALLINT cbPkCatalogName,
    SQLCHAR *szPkSchemaName,
    SQLSMALLINT cbPkSchemaName,
    SQLCHAR *szPkTableName,
    SQLSMALLINT cbPkTableName,
    SQLCHAR *szFkCatalogName,
    SQLSMALLINT cbFkCatalogName,
    SQLCHAR *szFkSchemaName,
    SQLSMALLINT cbFkSchemaName,
    SQLCHAR *szFkTableName,
    SQLSMALLINT cbFkTableName);

SQLRETURN SQLMoreResults(
    SQLHSTMT hstmt);

SQLRETURN SQLNativeSql(
    SQLHDBC hdbc,
    SQLCHAR *szSqlStrIn,
    SQLINTEGER cbSqlStrIn,
    SQLCHAR *szSqlStr,
    SQLINTEGER cbSqlStrMax,
    SQLINTEGER *pcbSqlStr);

SQLRETURN SQLNumParams(
    SQLHSTMT hstmt,
    SQLSMALLINT *pcpar);

SQLRETURN SQLParamOptions(
    SQLHSTMT hstmt,
    SQLULEN crow,
    SQLULEN *pirow);

SQLRETURN SQLPrimaryKeys(
    SQLHSTMT hstmt,
    SQLCHAR *szCatalogName,
    SQLSMALLINT cbCatalogName,
    SQLCHAR *szSchemaName,
    SQLSMALLINT cbSchemaName,
    SQLCHAR *szTableName,
    SQLSMALLINT cbTableName);

SQLRETURN SQLProcedureColumns(
    SQLHSTMT hstmt,
    SQLCHAR *szCatalogName,
    SQLSMALLINT cbCatalogName,
    SQLCHAR *szSchemaName,
    SQLSMALLINT cbSchemaName,
    SQLCHAR *szProcName,
    SQLSMALLINT cbProcName,
    SQLCHAR *szColumnName,
    SQLSMALLINT cbColumnName);

SQLRETURN SQLProcedures(
    SQLHSTMT hstmt,
    SQLCHAR *szCatalogName,
    SQLSMALLINT cbCatalogName,
    SQLCHAR *szSchemaName,
    SQLSMALLINT cbSchemaName,
    SQLCHAR *szProcName,
    SQLSMALLINT cbProcName);

SQLRETURN SQLSetPos(
    SQLHSTMT hstmt,
    SQLSETPOSIROW irow,
    SQLUSMALLINT fOption,
    SQLUSMALLINT fLock);

SQLRETURN SQLTablePrivileges(
    SQLHSTMT hstmt,
    SQLCHAR *szCatalogName,
    SQLSMALLINT cbCatalogName,
    SQLCHAR *szSchemaName,
    SQLSMALLINT cbSchemaName,
    SQLCHAR *szTableName,
    SQLSMALLINT cbTableName);

SQLRETURN SQLDrivers(
    SQLHENV henv,
    SQLUSMALLINT fDirection,
    SQLCHAR *szDriverDesc,
    SQLSMALLINT cbDriverDescMax,
    SQLSMALLINT *pcbDriverDesc,
    SQLCHAR *szDriverAttributes,
    SQLSMALLINT cbDrvrAttrMax,
    SQLSMALLINT *pcbDrvrAttr);

SQLRETURN SQLBindParameter(
    SQLHSTMT hstmt,
    SQLUSMALLINT ipar,
    SQLSMALLINT fParamType,
    SQLSMALLINT fCType,
    SQLSMALLINT fSqlType,
    SQLULEN cbColDef,
    SQLSMALLINT ibScale,
    SQLPOINTER rgbValue,
    SQLLEN cbValueMax,
    SQLLEN *pcbValue);
# 1991 "//usr/include/sqlext.h" 3 4
SQLRETURN SQLAllocHandleStd(
 SQLSMALLINT fHandleType,
 SQLHANDLE hInput,
 SQLHANDLE *phOutput);
# 2018 "//usr/include/sqlext.h" 3 4
SQLRETURN SQLSetScrollOptions(
    SQLHSTMT hstmt,
    SQLUSMALLINT fConcurrency,
    SQLLEN crowKeyset,
    SQLUSMALLINT crowRowset);
# 2059 "//usr/include/sqlext.h" 3 4
RETCODE TraceOpenLogFile(SQLPOINTER,LPSTR,LPSTR,DWORD);

RETCODE TraceCloseLogFile(SQLPOINTER);
SQLRETURN TraceReturn(SQLPOINTER,SQLRETURN);

DWORD TraceVersion();
# 2074 "//usr/include/sqlext.h" 3 4
RETCODE TraceVSControl(DWORD);







typedef struct tagODBC_VS_ARGS {



 const void *pguidEvent;

 DWORD dwFlags;
 union {
  WCHAR *wszArg;
  CHAR *szArg;
 }u1;
 union {
  WCHAR *wszCorrelation;
  CHAR *szCorrelation;
 }u2;
 RETCODE RetCode;
} ODBC_VS_ARGS, *PODBC_VS_ARGS;

VOID FireVSDebugEvent(PODBC_VS_ARGS);



}






int ODBCSetTryWaitValue ( DWORD dwValue );

DWORD ODBCGetTryWaitValue ( );





# 1 "//usr/include/sqlucode.h" 1 3 4
# 11 "//usr/include/sqlucode.h" 3 4
extern "C" {
# 29 "//usr/include/sqlucode.h" 3 4
SQLRETURN SQLColAttributeW(
 SQLHSTMT hstmt,
 SQLUSMALLINT iCol,
 SQLUSMALLINT iField,
 SQLPOINTER pCharAttr,
 SQLSMALLINT cbCharAttrMax,
 SQLSMALLINT *pcbCharAttr,
 SQLLEN *pNumAttr);

SQLRETURN SQLColAttributesW(
    SQLHSTMT hstmt,
    SQLUSMALLINT icol,
    SQLUSMALLINT fDescType,
    SQLPOINTER rgbDesc,
    SQLSMALLINT cbDescMax,
    SQLSMALLINT *pcbDesc,
    SQLLEN *pfDesc);

SQLRETURN SQLConnectW(
    SQLHDBC hdbc,
    SQLWCHAR *szDSN,
    SQLSMALLINT cbDSN,
    SQLWCHAR *szUID,
    SQLSMALLINT cbUID,
    SQLWCHAR *szAuthStr,
    SQLSMALLINT cbAuthStr);


SQLRETURN SQLDescribeColW(
    SQLHSTMT hstmt,
    SQLUSMALLINT icol,
    SQLWCHAR *szColName,
    SQLSMALLINT cbColNameMax,
    SQLSMALLINT *pcbColName,
    SQLSMALLINT *pfSqlType,
    SQLULEN *pcbColDef,
    SQLSMALLINT *pibScale,
    SQLSMALLINT *pfNullable);


SQLRETURN SQLErrorW(
    SQLHENV henv,
    SQLHDBC hdbc,
    SQLHSTMT hstmt,
    SQLWCHAR *szSqlState,
    SQLINTEGER *pfNativeError,
    SQLWCHAR *szErrorMsg,
    SQLSMALLINT cbErrorMsgMax,
    SQLSMALLINT *pcbErrorMsg);

SQLRETURN SQLExecDirectW(
    SQLHSTMT hstmt,
    SQLWCHAR *szSqlStr,
    SQLINTEGER cbSqlStr);

SQLRETURN SQLGetConnectAttrW(
    SQLHDBC hdbc,
    SQLINTEGER fAttribute,
    SQLPOINTER rgbValue,
    SQLINTEGER cbValueMax,
    SQLINTEGER *pcbValue);

SQLRETURN SQLGetCursorNameW(
    SQLHSTMT hstmt,
    SQLWCHAR *szCursor,
    SQLSMALLINT cbCursorMax,
    SQLSMALLINT *pcbCursor);


SQLRETURN SQLSetDescFieldW(SQLHDESC DescriptorHandle,
                    SQLSMALLINT RecNumber,
           SQLSMALLINT FieldIdentifier,
                    SQLPOINTER Value,
           SQLINTEGER BufferLength);



SQLRETURN SQLGetDescFieldW(
    SQLHDESC hdesc,
    SQLSMALLINT iRecord,
    SQLSMALLINT iField,
    SQLPOINTER rgbValue,
    SQLINTEGER cbValueMax,
    SQLINTEGER *pcbValue);

SQLRETURN SQLGetDescRecW(
    SQLHDESC hdesc,
    SQLSMALLINT iRecord,
    SQLWCHAR *szName,
    SQLSMALLINT cbNameMax,
    SQLSMALLINT *pcbName,
    SQLSMALLINT *pfType,
    SQLSMALLINT *pfSubType,
    SQLLEN *pLength,
    SQLSMALLINT *pPrecision,
    SQLSMALLINT *pScale,
    SQLSMALLINT *pNullable);

SQLRETURN SQLGetDiagFieldW(
    SQLSMALLINT fHandleType,
    SQLHANDLE handle,
    SQLSMALLINT iRecord,
    SQLSMALLINT fDiagField,
    SQLPOINTER rgbDiagInfo,
    SQLSMALLINT cbDiagInfoMax,
    SQLSMALLINT *pcbDiagInfo);

SQLRETURN SQLGetDiagRecW(
    SQLSMALLINT fHandleType,
    SQLHANDLE handle,
    SQLSMALLINT iRecord,
    SQLWCHAR *szSqlState,
    SQLINTEGER *pfNativeError,
    SQLWCHAR *szErrorMsg,
    SQLSMALLINT cbErrorMsgMax,
    SQLSMALLINT *pcbErrorMsg);





SQLRETURN SQLPrepareW(
    SQLHSTMT hstmt,
    SQLWCHAR *szSqlStr,
    SQLINTEGER cbSqlStr);

SQLRETURN SQLSetConnectAttrW(
    SQLHDBC hdbc,
    SQLINTEGER fAttribute,
    SQLPOINTER rgbValue,
    SQLINTEGER cbValue);

SQLRETURN SQLSetCursorNameW(
    SQLHSTMT hstmt,
    SQLWCHAR *szCursor,
    SQLSMALLINT cbCursor);







SQLRETURN SQLColumnsW(
    SQLHSTMT hstmt,
    SQLWCHAR *szCatalogName,
    SQLSMALLINT cbCatalogName,
    SQLWCHAR *szSchemaName,
    SQLSMALLINT cbSchemaName,
    SQLWCHAR *szTableName,
    SQLSMALLINT cbTableName,
    SQLWCHAR *szColumnName,
    SQLSMALLINT cbColumnName);

SQLRETURN SQLGetConnectOptionW(
    SQLHDBC hdbc,
    SQLUSMALLINT fOption,
    SQLPOINTER pvParam);



SQLRETURN SQLGetInfoW(
    SQLHDBC hdbc,
    SQLUSMALLINT fInfoType,
    SQLPOINTER rgbInfoValue,
    SQLSMALLINT cbInfoValueMax,
    SQLSMALLINT *pcbInfoValue);

SQLRETURN SQLGetTypeInfoW(
 SQLHSTMT StatementHandle,
 SQLSMALLINT DataType);


SQLRETURN SQLSetConnectOptionW(
    SQLHDBC hdbc,
    SQLUSMALLINT fOption,
    SQLULEN vParam);


SQLRETURN SQLSpecialColumnsW(
    SQLHSTMT hstmt,
    SQLUSMALLINT fColType,
    SQLWCHAR *szCatalogName,
    SQLSMALLINT cbCatalogName,
    SQLWCHAR *szSchemaName,
    SQLSMALLINT cbSchemaName,
    SQLWCHAR *szTableName,
    SQLSMALLINT cbTableName,
    SQLUSMALLINT fScope,
    SQLUSMALLINT fNullable);

SQLRETURN SQLStatisticsW(
    SQLHSTMT hstmt,
    SQLWCHAR *szCatalogName,
    SQLSMALLINT cbCatalogName,
    SQLWCHAR *szSchemaName,
    SQLSMALLINT cbSchemaName,
    SQLWCHAR *szTableName,
    SQLSMALLINT cbTableName,
    SQLUSMALLINT fUnique,
    SQLUSMALLINT fAccuracy);

SQLRETURN SQLTablesW(
    SQLHSTMT hstmt,
    SQLWCHAR *szCatalogName,
    SQLSMALLINT cbCatalogName,
    SQLWCHAR *szSchemaName,
    SQLSMALLINT cbSchemaName,
    SQLWCHAR *szTableName,
    SQLSMALLINT cbTableName,
    SQLWCHAR *szTableType,
    SQLSMALLINT cbTableType);



SQLRETURN SQLDataSourcesW(
    SQLHENV henv,
    SQLUSMALLINT fDirection,
    SQLWCHAR *szDSN,
    SQLSMALLINT cbDSNMax,
    SQLSMALLINT *pcbDSN,
    SQLWCHAR *szDescription,
    SQLSMALLINT cbDescriptionMax,
    SQLSMALLINT *pcbDescription);




SQLRETURN SQLDriverConnectW(
    SQLHDBC hdbc,
    SQLHWND hwnd,
    SQLWCHAR *szConnStrIn,
    SQLSMALLINT cbConnStrIn,
    SQLWCHAR *szConnStrOut,
    SQLSMALLINT cbConnStrOutMax,
    SQLSMALLINT *pcbConnStrOut,
    SQLUSMALLINT fDriverCompletion);


SQLRETURN SQLBrowseConnectW(
    SQLHDBC hdbc,
    SQLWCHAR *szConnStrIn,
    SQLSMALLINT cbConnStrIn,
    SQLWCHAR *szConnStrOut,
    SQLSMALLINT cbConnStrOutMax,
    SQLSMALLINT *pcbConnStrOut);

SQLRETURN SQLColumnPrivilegesW(
    SQLHSTMT hstmt,
    SQLWCHAR *szCatalogName,
    SQLSMALLINT cbCatalogName,
    SQLWCHAR *szSchemaName,
    SQLSMALLINT cbSchemaName,
    SQLWCHAR *szTableName,
    SQLSMALLINT cbTableName,
    SQLWCHAR *szColumnName,
    SQLSMALLINT cbColumnName);

SQLRETURN SQLGetStmtAttrW(
    SQLHSTMT hstmt,
    SQLINTEGER fAttribute,
    SQLPOINTER rgbValue,
    SQLINTEGER cbValueMax,
    SQLINTEGER *pcbValue);

SQLRETURN SQLSetStmtAttrW(
    SQLHSTMT hstmt,
    SQLINTEGER fAttribute,
    SQLPOINTER rgbValue,
    SQLINTEGER cbValueMax);

SQLRETURN SQLForeignKeysW(
    SQLHSTMT hstmt,
    SQLWCHAR *szPkCatalogName,
    SQLSMALLINT cbPkCatalogName,
    SQLWCHAR *szPkSchemaName,
    SQLSMALLINT cbPkSchemaName,
    SQLWCHAR *szPkTableName,
    SQLSMALLINT cbPkTableName,
    SQLWCHAR *szFkCatalogName,
    SQLSMALLINT cbFkCatalogName,
    SQLWCHAR *szFkSchemaName,
    SQLSMALLINT cbFkSchemaName,
    SQLWCHAR *szFkTableName,
    SQLSMALLINT cbFkTableName);


SQLRETURN SQLNativeSqlW(
    SQLHDBC hdbc,
    SQLWCHAR *szSqlStrIn,
    SQLINTEGER cbSqlStrIn,
    SQLWCHAR *szSqlStr,
    SQLINTEGER cbSqlStrMax,
    SQLINTEGER *pcbSqlStr);


SQLRETURN SQLPrimaryKeysW(
    SQLHSTMT hstmt,
    SQLWCHAR *szCatalogName,
    SQLSMALLINT cbCatalogName,
    SQLWCHAR *szSchemaName,
    SQLSMALLINT cbSchemaName,
    SQLWCHAR *szTableName,
    SQLSMALLINT cbTableName);

SQLRETURN SQLProcedureColumnsW(
    SQLHSTMT hstmt,
    SQLWCHAR *szCatalogName,
    SQLSMALLINT cbCatalogName,
    SQLWCHAR *szSchemaName,
    SQLSMALLINT cbSchemaName,
    SQLWCHAR *szProcName,
    SQLSMALLINT cbProcName,
    SQLWCHAR *szColumnName,
    SQLSMALLINT cbColumnName);

SQLRETURN SQLProceduresW(
    SQLHSTMT hstmt,
    SQLWCHAR *szCatalogName,
    SQLSMALLINT cbCatalogName,
    SQLWCHAR *szSchemaName,
    SQLSMALLINT cbSchemaName,
    SQLWCHAR *szProcName,
    SQLSMALLINT cbProcName);


SQLRETURN SQLTablePrivilegesW(
    SQLHSTMT hstmt,
    SQLWCHAR *szCatalogName,
    SQLSMALLINT cbCatalogName,
    SQLWCHAR *szSchemaName,
    SQLSMALLINT cbSchemaName,
    SQLWCHAR *szTableName,
    SQLSMALLINT cbTableName);

SQLRETURN SQLDriversW(
    SQLHENV henv,
    SQLUSMALLINT fDirection,
    SQLWCHAR *szDriverDesc,
    SQLSMALLINT cbDriverDescMax,
    SQLSMALLINT *pcbDriverDesc,
    SQLWCHAR *szDriverAttributes,
    SQLSMALLINT cbDrvrAttrMax,
    SQLSMALLINT *pcbDrvrAttr);




SQLRETURN SQLColAttributeA(
 SQLHSTMT hstmt,
 SQLSMALLINT iCol,
 SQLSMALLINT iField,
 SQLPOINTER pCharAttr,
 SQLSMALLINT cbCharAttrMax,
 SQLSMALLINT *pcbCharAttr,
 SQLLEN *pNumAttr);

SQLRETURN SQLColAttributesA(
    SQLHSTMT hstmt,
    SQLUSMALLINT icol,
    SQLUSMALLINT fDescType,
    SQLPOINTER rgbDesc,
    SQLSMALLINT cbDescMax,
    SQLSMALLINT *pcbDesc,
    SQLLEN *pfDesc);

SQLRETURN SQLConnectA(
    SQLHDBC hdbc,
    SQLCHAR *szDSN,
    SQLSMALLINT cbDSN,
    SQLCHAR *szUID,
    SQLSMALLINT cbUID,
    SQLCHAR *szAuthStr,
    SQLSMALLINT cbAuthStr);


SQLRETURN SQLDescribeColA(
    SQLHSTMT hstmt,
    SQLUSMALLINT icol,
    SQLCHAR *szColName,
    SQLSMALLINT cbColNameMax,
    SQLSMALLINT *pcbColName,
    SQLSMALLINT *pfSqlType,
    SQLULEN *pcbColDef,
    SQLSMALLINT *pibScale,
    SQLSMALLINT *pfNullable);


SQLRETURN SQLErrorA(
    SQLHENV henv,
    SQLHDBC hdbc,
    SQLHSTMT hstmt,
    SQLCHAR *szSqlState,
    SQLINTEGER *pfNativeError,
    SQLCHAR *szErrorMsg,
    SQLSMALLINT cbErrorMsgMax,
    SQLSMALLINT *pcbErrorMsg);

SQLRETURN SQLExecDirectA(
    SQLHSTMT hstmt,
    SQLCHAR *szSqlStr,
    SQLINTEGER cbSqlStr);

SQLRETURN SQLGetConnectAttrA(
    SQLHDBC hdbc,
    SQLINTEGER fAttribute,
    SQLPOINTER rgbValue,
    SQLINTEGER cbValueMax,
    SQLINTEGER *pcbValue);

SQLRETURN SQLGetCursorNameA(
    SQLHSTMT hstmt,
    SQLCHAR *szCursor,
    SQLSMALLINT cbCursorMax,
    SQLSMALLINT *pcbCursor);


SQLRETURN SQLGetDescFieldA(
    SQLHDESC hdesc,
    SQLSMALLINT iRecord,
    SQLSMALLINT iField,
    SQLPOINTER rgbValue,
    SQLINTEGER cbValueMax,
    SQLINTEGER *pcbValue);

SQLRETURN SQLGetDescRecA(
    SQLHDESC hdesc,
    SQLSMALLINT iRecord,
    SQLCHAR *szName,
    SQLSMALLINT cbNameMax,
    SQLSMALLINT *pcbName,
    SQLSMALLINT *pfType,
    SQLSMALLINT *pfSubType,
    SQLLEN *pLength,
    SQLSMALLINT *pPrecision,
    SQLSMALLINT *pScale,
    SQLSMALLINT *pNullable);

SQLRETURN SQLGetDiagFieldA(
    SQLSMALLINT fHandleType,
    SQLHANDLE handle,
    SQLSMALLINT iRecord,
    SQLSMALLINT fDiagField,
    SQLPOINTER rgbDiagInfo,
    SQLSMALLINT cbDiagInfoMax,
    SQLSMALLINT *pcbDiagInfo);

SQLRETURN SQLGetDiagRecA(
    SQLSMALLINT fHandleType,
    SQLHANDLE handle,
    SQLSMALLINT iRecord,
    SQLCHAR *szSqlState,
    SQLINTEGER *pfNativeError,
    SQLCHAR *szErrorMsg,
    SQLSMALLINT cbErrorMsgMax,
    SQLSMALLINT *pcbErrorMsg);


SQLRETURN SQLGetStmtAttrA(
    SQLHSTMT hstmt,
    SQLINTEGER fAttribute,
    SQLPOINTER rgbValue,
    SQLINTEGER cbValueMax,
    SQLINTEGER *pcbValue);



SQLRETURN SQLGetTypeInfoA(
 SQLHSTMT StatementHandle,
 SQLSMALLINT DataTyoe);

SQLRETURN SQLPrepareA(
    SQLHSTMT hstmt,
    SQLCHAR *szSqlStr,
    SQLINTEGER cbSqlStr);

SQLRETURN SQLSetConnectAttrA(
    SQLHDBC hdbc,
    SQLINTEGER fAttribute,
    SQLPOINTER rgbValue,
    SQLINTEGER cbValue);

SQLRETURN SQLSetCursorNameA(
    SQLHSTMT hstmt,
    SQLCHAR *szCursor,
    SQLSMALLINT cbCursor);







SQLRETURN SQLColumnsA(
    SQLHSTMT hstmt,
    SQLCHAR *szCatalogName,
    SQLSMALLINT cbCatalogName,
    SQLCHAR *szSchemaName,
    SQLSMALLINT cbSchemaName,
    SQLCHAR *szTableName,
    SQLSMALLINT cbTableName,
    SQLCHAR *szColumnName,
    SQLSMALLINT cbColumnName);

SQLRETURN SQLGetConnectOptionA(
    SQLHDBC hdbc,
    SQLUSMALLINT fOption,
    SQLPOINTER pvParam);



SQLRETURN SQLGetInfoA(
    SQLHDBC hdbc,
    SQLUSMALLINT fInfoType,
    SQLPOINTER rgbInfoValue,
    SQLSMALLINT cbInfoValueMax,
    SQLSMALLINT* pcbInfoValue);

SQLRETURN SQLGetStmtOptionA(
    SQLHSTMT hstmt,
    SQLUSMALLINT fOption,
    SQLPOINTER pvParam);

SQLRETURN SQLSetConnectOptionA(
    SQLHDBC hdbc,
    SQLUSMALLINT fOption,
    SQLULEN vParam);

SQLRETURN SQLSetStmtOptionA(
    SQLHSTMT hstmt,
    SQLUSMALLINT fOption,
    SQLULEN vParam);

SQLRETURN SQLSpecialColumnsA(
    SQLHSTMT hstmt,
    SQLUSMALLINT fColType,
    SQLCHAR *szCatalogName,
    SQLSMALLINT cbCatalogName,
    SQLCHAR *szSchemaName,
    SQLSMALLINT cbSchemaName,
    SQLCHAR *szTableName,
    SQLSMALLINT cbTableName,
    SQLUSMALLINT fScope,
    SQLUSMALLINT fNullable);

SQLRETURN SQLStatisticsA(
    SQLHSTMT hstmt,

    SQLCHAR *szCatalogName,
    SQLSMALLINT cbCatalogName,
    SQLCHAR *szSchemaName,
    SQLSMALLINT cbSchemaName,
    SQLCHAR *szTableName,
    SQLSMALLINT cbTableName,
    SQLUSMALLINT fUnique,
    SQLUSMALLINT fAccuracy);

SQLRETURN SQLTablesA(
    SQLHSTMT hstmt,

    SQLCHAR *szCatalogName,
    SQLSMALLINT cbCatalogName,
    SQLCHAR *szSchemaName,
    SQLSMALLINT cbSchemaName,
    SQLCHAR *szTableName,
    SQLSMALLINT cbTableName,
    SQLCHAR *szTableType,

    SQLSMALLINT cbTableType);



SQLRETURN SQLDataSourcesA(
    SQLHENV henv,
    SQLUSMALLINT fDirection,
    SQLCHAR *szDSN,
    SQLSMALLINT cbDSNMax,
    SQLSMALLINT *pcbDSN,
    SQLCHAR *szDescription,
    SQLSMALLINT cbDescriptionMax,
    SQLSMALLINT *pcbDescription);




SQLRETURN SQLDriverConnectA(
    SQLHDBC hdbc,
    SQLHWND hwnd,
    SQLCHAR *szConnStrIn,
    SQLSMALLINT cbConnStrIn,
    SQLCHAR *szConnStrOut,
    SQLSMALLINT cbConnStrOutMax,
    SQLSMALLINT *pcbConnStrOut,
    SQLUSMALLINT fDriverCompletion);


SQLRETURN SQLBrowseConnectA(
    SQLHDBC hdbc,
    SQLCHAR *szConnStrIn,
    SQLSMALLINT cbConnStrIn,
    SQLCHAR *szConnStrOut,
    SQLSMALLINT cbConnStrOutMax,
    SQLSMALLINT *pcbConnStrOut);

SQLRETURN SQLColumnPrivilegesA(
    SQLHSTMT hstmt,
    SQLCHAR *szCatalogName,
    SQLSMALLINT cbCatalogName,
    SQLCHAR *szSchemaName,
    SQLSMALLINT cbSchemaName,
    SQLCHAR *szTableName,
    SQLSMALLINT cbTableName,
    SQLCHAR *szColumnName,
    SQLSMALLINT cbColumnName);

SQLRETURN SQLDescribeParamA(
    SQLHSTMT hstmt,
    SQLUSMALLINT ipar,
    SQLSMALLINT *pfSqlType,
    SQLUINTEGER *pcbParamDef,
    SQLSMALLINT *pibScale,
    SQLSMALLINT *pfNullable);


SQLRETURN SQLForeignKeysA(
    SQLHSTMT hstmt,
    SQLCHAR *szPkCatalogName,
    SQLSMALLINT cbPkCatalogName,
    SQLCHAR *szPkSchemaName,
    SQLSMALLINT cbPkSchemaName,
    SQLCHAR *szPkTableName,
    SQLSMALLINT cbPkTableName,
    SQLCHAR *szFkCatalogName,
    SQLSMALLINT cbFkCatalogName,
    SQLCHAR *szFkSchemaName,
    SQLSMALLINT cbFkSchemaName,
    SQLCHAR *szFkTableName,
    SQLSMALLINT cbFkTableName);


SQLRETURN SQLNativeSqlA(
    SQLHDBC hdbc,
    SQLCHAR *szSqlStrIn,
    SQLINTEGER cbSqlStrIn,
    SQLCHAR *szSqlStr,
    SQLINTEGER cbSqlStrMax,
    SQLINTEGER *pcbSqlStr);


SQLRETURN SQLPrimaryKeysA(
    SQLHSTMT hstmt,
    SQLCHAR *szCatalogName,
    SQLSMALLINT cbCatalogName,
    SQLCHAR *szSchemaName,
    SQLSMALLINT cbSchemaName,
    SQLCHAR *szTableName,
    SQLSMALLINT cbTableName);

SQLRETURN SQLProcedureColumnsA(
    SQLHSTMT hstmt,
    SQLCHAR *szCatalogName,
    SQLSMALLINT cbCatalogName,
    SQLCHAR *szSchemaName,
    SQLSMALLINT cbSchemaName,
    SQLCHAR *szProcName,
    SQLSMALLINT cbProcName,
    SQLCHAR *szColumnName,
    SQLSMALLINT cbColumnName);

SQLRETURN SQLProceduresA(
    SQLHSTMT hstmt,
    SQLCHAR *szCatalogName,
    SQLSMALLINT cbCatalogName,
    SQLCHAR *szSchemaName,
    SQLSMALLINT cbSchemaName,
    SQLCHAR *szProcName,
    SQLSMALLINT cbProcName);


SQLRETURN SQLTablePrivilegesA(
    SQLHSTMT hstmt,
    SQLCHAR *szCatalogName,
    SQLSMALLINT cbCatalogName,
    SQLCHAR *szSchemaName,
    SQLSMALLINT cbSchemaName,
    SQLCHAR *szTableName,
    SQLSMALLINT cbTableName);

SQLRETURN SQLDriversA(
    SQLHENV henv,
    SQLUSMALLINT fDirection,
    SQLCHAR *szDriverDesc,
    SQLSMALLINT cbDriverDescMax,
    SQLSMALLINT *pcbDriverDesc,
    SQLCHAR *szDriverAttributes,
    SQLSMALLINT cbDrvrAttrMax,
    SQLSMALLINT *pcbDrvrAttr);
# 780 "//usr/include/sqlucode.h" 3 4
}
# 2120 "//usr/include/sqlext.h" 2 3 4
# 32 "odbc.h" 2
# 1 "//usr/include/sqlucode.h" 1 3 4
# 33 "odbc.h" 2


using namespace v8;
using namespace node;
# 56 "odbc.h"
typedef struct {
  unsigned char *name;
  unsigned int len;
  SQLLEN type;
  SQLUSMALLINT index;
} Column;

typedef struct {
  SQLSMALLINT c_type;
  SQLSMALLINT type;
  SQLLEN size;
  void *buffer;
  SQLLEN buffer_length;
  SQLLEN length;
  SQLSMALLINT decimals;
} Parameter;

class ODBC : public node::ObjectWrap {
  public:
    static Persistent<FunctionTemplate> constructor_template;
    static uv_mutex_t g_odbcMutex;
    static uv_async_t g_async;

    static void Init(v8::Handle<Object> target);
    static Column* GetColumns(SQLHSTMT hStmt, short* colCount);
    static void FreeColumns(Column* columns, short* colCount);
    static Handle<Value> GetColumnValue(SQLHSTMT hStmt, Column column, uint16_t* buffer, int bufferLength);
    static Local<Object> GetRecordTuple (SQLHSTMT hStmt, Column* columns, short* colCount, uint16_t* buffer, int bufferLength);
    static Handle<Value> GetRecordArray (SQLHSTMT hStmt, Column* columns, short* colCount, uint16_t* buffer, int bufferLength);
    static Handle<Value> CallbackSQLError (SQLSMALLINT handleType, SQLHANDLE handle, Persistent<Function> cb);
    static Handle<Value> CallbackSQLError (SQLSMALLINT handleType, SQLHANDLE handle, char* message, Persistent<Function> cb);
    static Local<Object> GetSQLError (SQLSMALLINT handleType, SQLHANDLE handle);
    static Local<Object> GetSQLError (SQLSMALLINT handleType, SQLHANDLE handle, char* message);
    static Local<Array> GetAllRecordsSync (HENV hENV, HDBC hDBC, HSTMT hSTMT, uint16_t* buffer, int bufferLength);



    static Parameter* GetParametersFromArray (Local<Array> values, int* paramCount);

    void Free();

  protected:
    ODBC() {}

    ~ODBC();

    static Handle<Value> New(const Arguments& args);


    static Handle<Value> CreateConnection(const Arguments& args);
    static void UV_CreateConnection(uv_work_t* work_req);
    static void UV_AfterCreateConnection(uv_work_t* work_req, int status);

    static void WatcherCallback(uv_async_t* w, int revents);


    static Handle<Value> CreateConnectionSync(const Arguments& args);

    ODBC *self(void) { return this; }

  protected:
    HENV m_hEnv;
};

struct create_connection_work_data {
  Persistent<Function> cb;
  ODBC *dbo;
  HDBC hDBC;
  int result;
};

struct open_request {
  Persistent<Function> cb;
  ODBC *dbo;
  int result;
  char connection[1];
};

struct close_request {
  Persistent<Function> cb;
  ODBC *dbo;
  int result;
};

struct query_request {
  Persistent<Function> cb;
  ODBC *dbo;
  HSTMT hSTMT;
  int affectedRows;
  char *sql;
  char *catalog;
  char *schema;
  char *table;
  char *type;
  char *column;
  Parameter *params;
  int paramCount;
  int result;
};
# 25 "odbc_result.cpp" 2
# 1 "odbc_connection.h" 1
# 21 "odbc_connection.h"
class ODBCConnection : public node::ObjectWrap {
  public:
   static Persistent<String> OPTION_SQL;
   static Persistent<String> OPTION_PARAMS;
   static Persistent<String> OPTION_NORESULTS;
   static Persistent<FunctionTemplate> constructor_template;

   static void Init(v8::Handle<Object> target);

   void Free();

  protected:
    ODBCConnection() {};

    explicit ODBCConnection(HENV hENV, HDBC hDBC):
      ObjectWrap(),
      m_hENV(hENV),
      m_hDBC(hDBC) {};

    ~ODBCConnection();


    static Handle<Value> New(const Arguments& args);


    static Handle<Value> ConnectedGetter(Local<String> property, const AccessorInfo &info);
    static Handle<Value> ConnectTimeoutGetter(Local<String> property, const AccessorInfo &info);
    static void ConnectTimeoutSetter(Local<String> property, Local<Value> value, const AccessorInfo &info);
    static Handle<Value> LoginTimeoutGetter(Local<String> property, const AccessorInfo &info);
    static void LoginTimeoutSetter(Local<String> property, Local<Value> value, const AccessorInfo &info);


    static Handle<Value> BeginTransaction(const Arguments& args);
    static void UV_BeginTransaction(uv_work_t* work_req);
    static void UV_AfterBeginTransaction(uv_work_t* work_req, int status);

    static Handle<Value> EndTransaction(const Arguments& args);
    static void UV_EndTransaction(uv_work_t* work_req);
    static void UV_AfterEndTransaction(uv_work_t* work_req, int status);

    static Handle<Value> Open(const Arguments& args);
    static void UV_Open(uv_work_t* work_req);
    static void UV_AfterOpen(uv_work_t* work_req, int status);

    static Handle<Value> Close(const Arguments& args);
    static void UV_Close(uv_work_t* work_req);
    static void UV_AfterClose(uv_work_t* work_req, int status);

    static Handle<Value> CreateStatement(const Arguments& args);
    static void UV_CreateStatement(uv_work_t* work_req);
    static void UV_AfterCreateStatement(uv_work_t* work_req, int status);

    static Handle<Value> Query(const Arguments& args);
    static void UV_Query(uv_work_t* req);
    static void UV_AfterQuery(uv_work_t* req, int status);

    static Handle<Value> Columns(const Arguments& args);
    static void UV_Columns(uv_work_t* req);

    static Handle<Value> Tables(const Arguments& args);
    static void UV_Tables(uv_work_t* req);


    static Handle<Value> CloseSync(const Arguments& args);
    static Handle<Value> CreateStatementSync(const Arguments& args);
    static Handle<Value> OpenSync(const Arguments& args);
    static Handle<Value> QuerySync(const Arguments& args);
    static Handle<Value> BeginTransactionSync(const Arguments& args);
    static Handle<Value> EndTransactionSync(const Arguments& args);

    struct Fetch_Request {
      Persistent<Function> callback;
      ODBCConnection *objResult;
      SQLRETURN result;
    };

    ODBCConnection *self(void) { return this; }

  protected:
    HENV m_hENV;
    HDBC m_hDBC;
    SQLUSMALLINT canHaveMoreResults;
    bool connected;
    int statements;
    SQLUINTEGER connectTimeout;
    SQLUINTEGER loginTimeout;
};

struct create_statement_work_data {
  Persistent<Function> cb;
  ODBCConnection *conn;
  HSTMT hSTMT;
  int result;
};

struct query_work_data {
  Persistent<Function> cb;
  ODBCConnection *conn;
  HSTMT hSTMT;

  Parameter *params;
  int paramCount;
  int completionType;
  bool noResultObject;

  void *sql;
  void *catalog;
  void *schema;
  void *table;
  void *type;
  void *column;

  int sqlLen;
  int sqlSize;

  int result;
};

struct open_connection_work_data {
  Persistent<Function> cb;
  ODBCConnection *conn;
  int result;
  int connectionLength;
  void* connection;
};

struct close_connection_work_data {
  Persistent<Function> cb;
  ODBCConnection *conn;
  int result;
};
# 26 "odbc_result.cpp" 2
# 1 "odbc_result.h" 1
# 20 "odbc_result.h"
class ODBCResult : public node::ObjectWrap {
  public:
   static Persistent<String> OPTION_FETCH_MODE;
   static Persistent<FunctionTemplate> constructor_template;
   static void Init(v8::Handle<Object> target);

   void Free();

  protected:
    ODBCResult() {};

    explicit ODBCResult(HENV hENV, HDBC hDBC, HSTMT hSTMT, bool canFreeHandle):
      ObjectWrap(),
      m_hENV(hENV),
      m_hDBC(hDBC),
      m_hSTMT(hSTMT),
      m_canFreeHandle(canFreeHandle) {};

    ~ODBCResult();


    static Handle<Value> New(const Arguments& args);


    static Handle<Value> Fetch(const Arguments& args);
    static void UV_Fetch(uv_work_t* work_req);
    static void UV_AfterFetch(uv_work_t* work_req, int status);

    static Handle<Value> FetchAll(const Arguments& args);
    static void UV_FetchAll(uv_work_t* work_req);
    static void UV_AfterFetchAll(uv_work_t* work_req, int status);


    static Handle<Value> CloseSync(const Arguments& args);
    static Handle<Value> MoreResultsSync(const Arguments& args);
    static Handle<Value> FetchSync(const Arguments& args);
    static Handle<Value> FetchAllSync(const Arguments& args);
    static Handle<Value> GetColumnNamesSync(const Arguments& args);


    static Handle<Value> FetchModeGetter(Local<String> property, const AccessorInfo &info);
    static void FetchModeSetter(Local<String> property, Local<Value> value, const AccessorInfo &info);

    struct fetch_work_data {
      Persistent<Function> cb;
      ODBCResult *objResult;
      SQLRETURN result;

      int fetchMode;
      int count;
      int errorCount;
      Persistent<Array> rows;
      Persistent<Object> objError;
    };

    ODBCResult *self(void) { return this; }

  protected:
    HENV m_hENV;
    HDBC m_hDBC;
    HSTMT m_hSTMT;
    bool m_canFreeHandle;
    int m_fetchMode;

    uint16_t *buffer;
    int bufferLength;
    Column *columns;
    short colCount;
};
# 27 "odbc_result.cpp" 2
# 1 "odbc_statement.h" 1
# 20 "odbc_statement.h"
class ODBCStatement : public node::ObjectWrap {
  public:
   static Persistent<FunctionTemplate> constructor_template;
   static void Init(v8::Handle<Object> target);

   void Free();

  protected:
    ODBCStatement() {};

    explicit ODBCStatement(HENV hENV, HDBC hDBC, HSTMT hSTMT):
      ObjectWrap(),
      m_hENV(hENV),
      m_hDBC(hDBC),
      m_hSTMT(hSTMT) {};

    ~ODBCStatement();


    static Handle<Value> New(const Arguments& args);


    static Handle<Value> Execute(const Arguments& args);
    static void UV_Execute(uv_work_t* work_req);
    static void UV_AfterExecute(uv_work_t* work_req, int status);

    static Handle<Value> ExecuteDirect(const Arguments& args);
    static void UV_ExecuteDirect(uv_work_t* work_req);
    static void UV_AfterExecuteDirect(uv_work_t* work_req, int status);

    static Handle<Value> ExecuteNonQuery(const Arguments& args);
    static void UV_ExecuteNonQuery(uv_work_t* work_req);
    static void UV_AfterExecuteNonQuery(uv_work_t* work_req, int status);

    static Handle<Value> Prepare(const Arguments& args);
    static void UV_Prepare(uv_work_t* work_req);
    static void UV_AfterPrepare(uv_work_t* work_req, int status);

    static Handle<Value> Bind(const Arguments& args);
    static void UV_Bind(uv_work_t* work_req);
    static void UV_AfterBind(uv_work_t* work_req, int status);


    static Handle<Value> CloseSync(const Arguments& args);
    static Handle<Value> ExecuteSync(const Arguments& args);
    static Handle<Value> ExecuteDirectSync(const Arguments& args);
    static Handle<Value> ExecuteNonQuerySync(const Arguments& args);
    static Handle<Value> PrepareSync(const Arguments& args);
    static Handle<Value> BindSync(const Arguments& args);

    struct Fetch_Request {
      Persistent<Function> callback;
      ODBCStatement *objResult;
      SQLRETURN result;
    };

    ODBCStatement *self(void) { return this; }

  protected:
    HENV m_hENV;
    HDBC m_hDBC;
    HSTMT m_hSTMT;

    Parameter *params;
    int paramCount;

    uint16_t *buffer;
    int bufferLength;
    Column *columns;
    short colCount;
};

struct execute_direct_work_data {
  Persistent<Function> cb;
  ODBCStatement *stmt;
  int result;
  void *sql;
  int sqlLen;
};

struct execute_work_data {
  Persistent<Function> cb;
  ODBCStatement *stmt;
  int result;
};

struct prepare_work_data {
  Persistent<Function> cb;
  ODBCStatement *stmt;
  int result;
  void *sql;
  int sqlLen;
};

struct bind_work_data {
  Persistent<Function> cb;
  ODBCStatement *stmt;
  int result;
};
# 28 "odbc_result.cpp" 2

using namespace v8;
using namespace node;

Persistent<FunctionTemplate> ODBCResult::constructor_template;
Persistent<String> ODBCResult::OPTION_FETCH_MODE = Persistent<String>::New(String::New("fetchMode"));

void ODBCResult::Init(v8::Handle<Object> target) {
  (void)0;
  HandleScope scope;

  Local<FunctionTemplate> t = FunctionTemplate::New(New);


  constructor_template = Persistent<FunctionTemplate>::New(t);
  constructor_template->SetClassName(String::NewSymbol("ODBCResult"));


  Local<ObjectTemplate> instance_template = constructor_template->InstanceTemplate();
  instance_template->SetInternalFieldCount(1);


  NODE_SET_PROTOTYPE_METHOD(constructor_template, "fetchAll", FetchAll);
  NODE_SET_PROTOTYPE_METHOD(constructor_template, "fetch", Fetch);

  NODE_SET_PROTOTYPE_METHOD(constructor_template, "moreResultsSync", MoreResultsSync);
  NODE_SET_PROTOTYPE_METHOD(constructor_template, "closeSync", CloseSync);
  NODE_SET_PROTOTYPE_METHOD(constructor_template, "fetchSync", FetchSync);
  NODE_SET_PROTOTYPE_METHOD(constructor_template, "fetchAllSync", FetchAllSync);
  NODE_SET_PROTOTYPE_METHOD(constructor_template, "getColumnNamesSync", GetColumnNamesSync);


  instance_template->SetAccessor(String::New("fetchMode"), FetchModeGetter, FetchModeSetter);


  target->Set( v8::String::NewSymbol("ODBCResult"),
               constructor_template->GetFunction());

  scope.Close(Undefined());
}

ODBCResult::~ODBCResult() {
  (void)0;
  this->Free();
}

void ODBCResult::Free() {
  (void)0;

  if (m_hSTMT && m_canFreeHandle) {
    uv_mutex_lock(&ODBC::g_odbcMutex);

    SQLFreeHandle( 3, m_hSTMT);

    m_hSTMT = __null;

    uv_mutex_unlock(&ODBC::g_odbcMutex);
  }

  if (bufferLength > 0) {
    bufferLength = 0;
    free(buffer);
  }
}

Handle<Value> ODBCResult::New(const Arguments& args) {
  (void)0;

  HandleScope scope;

  if (args.Length() <= (0) || !args[0]->IsExternal()) return ThrowException(Exception::TypeError( String::New("Argument " "0" " invalid"))); Local<External> js_henv = Local<External>::Cast(args[0]);;
  if (args.Length() <= (1) || !args[1]->IsExternal()) return ThrowException(Exception::TypeError( String::New("Argument " "1" " invalid"))); Local<External> js_hdbc = Local<External>::Cast(args[1]);;
  if (args.Length() <= (2) || !args[2]->IsExternal()) return ThrowException(Exception::TypeError( String::New("Argument " "2" " invalid"))); Local<External> js_hstmt = Local<External>::Cast(args[2]);;
  if (args.Length() <= (3) || !args[3]->IsExternal()) return ThrowException(Exception::TypeError( String::New("Argument " "3" " invalid"))); Local<External> js_canFreeHandle = Local<External>::Cast(args[3]);;

  HENV hENV = static_cast<HENV>(js_henv->Value());
  HDBC hDBC = static_cast<HDBC>(js_hdbc->Value());
  HSTMT hSTMT = static_cast<HSTMT>(js_hstmt->Value());
  bool* canFreeHandle = static_cast<bool *>(js_canFreeHandle->Value());


  ODBCResult* objODBCResult = new ODBCResult(hENV, hDBC, hSTMT, *canFreeHandle);

  (void)0




   ;


  delete canFreeHandle;


  objODBCResult->bufferLength = 1048576 - 1;


  objODBCResult->buffer = (uint16_t *) malloc(objODBCResult->bufferLength + 1);



  objODBCResult->colCount = 0;


  objODBCResult->m_fetchMode = 4;

  objODBCResult->Wrap(args.Holder());

  return scope.Close(args.Holder());
}

Handle<Value> ODBCResult::FetchModeGetter(Local<String> property, const AccessorInfo &info) {
  HandleScope scope;

  ODBCResult *obj = ObjectWrap::Unwrap<ODBCResult>(info.Holder());

  return scope.Close(Integer::New(obj->m_fetchMode));
}

void ODBCResult::FetchModeSetter(Local<String> property, Local<Value> value, const AccessorInfo &info) {
  HandleScope scope;

  ODBCResult *obj = ObjectWrap::Unwrap<ODBCResult>(info.Holder());

  if (value->IsNumber()) {
    obj->m_fetchMode = value->Int32Value();
  }
}





Handle<Value> ODBCResult::Fetch(const Arguments& args) {
  (void)0;

  HandleScope scope;

  ODBCResult* objODBCResult = ObjectWrap::Unwrap<ODBCResult>(args.Holder());

  uv_work_t* work_req = (uv_work_t *) (calloc(1, sizeof(uv_work_t)));

  fetch_work_data* data = (fetch_work_data *) calloc(1, sizeof(fetch_work_data));

  Local<Function> cb;


  data->fetchMode = objODBCResult->m_fetchMode;

  if (args.Length() == 1 && args[0]->IsFunction()) {
    cb = Local<Function>::Cast(args[0]);
  }
  else if (args.Length() == 2 && args[0]->IsObject() && args[1]->IsFunction()) {
    cb = Local<Function>::Cast(args[1]);

    Local<Object> obj = args[0]->ToObject();

    if (obj->Has(OPTION_FETCH_MODE) && obj->Get(OPTION_FETCH_MODE)->IsInt32()) {
      data->fetchMode = obj->Get(OPTION_FETCH_MODE)->ToInt32()->Value();
    }
  }
  else {
    return ThrowException(Exception::TypeError(
      String::New("ODBCResult::Fetch(): 1 or 2 arguments are required. The last argument must be a callback function.")
    ));
  }

  data->cb = Persistent<Function>::New(cb);

  data->objResult = objODBCResult;
  work_req->data = data;

  uv_queue_work(
    uv_default_loop(),
    work_req,
    UV_Fetch,
    (uv_after_work_cb)UV_AfterFetch);

  objODBCResult->Ref();

  return scope.Close(Undefined());
}

void ODBCResult::UV_Fetch(uv_work_t* work_req) {
  (void)0;

  fetch_work_data* data = (fetch_work_data *)(work_req->data);

  data->result = SQLFetch(data->objResult->m_hSTMT);
}

void ODBCResult::UV_AfterFetch(uv_work_t* work_req, int status) {
  (void)0;

  HandleScope scope;

  fetch_work_data* data = (fetch_work_data *)(work_req->data);

  SQLRETURN ret = data->result;


  Local<Object> objError;
  bool moreWork = true;
  bool error = false;

  if (data->objResult->colCount == 0) {
    data->objResult->columns = ODBC::GetColumns(
      data->objResult->m_hSTMT,
      &data->objResult->colCount);
  }


  if (data->objResult->colCount == 0) {

    moreWork = false;
  }

  else if (ret == (-1)) {
    moreWork = false;
    error = true;

    objError = ODBC::GetSQLError(
      3,
      data->objResult->m_hSTMT,
      (char *) "Error in ODBCResult::UV_AfterFetch");
  }

  else if (ret == 100) {
    moreWork = false;
  }

  if (moreWork) {
    Handle<Value> args[2];

    args[0] = Null();
    if (data->fetchMode == 3) {
      args[1] = ODBC::GetRecordArray(
        data->objResult->m_hSTMT,
        data->objResult->columns,
        &data->objResult->colCount,
        data->objResult->buffer,
        data->objResult->bufferLength);
    }
    else {
      args[1] = ODBC::GetRecordTuple(
        data->objResult->m_hSTMT,
        data->objResult->columns,
        &data->objResult->colCount,
        data->objResult->buffer,
        data->objResult->bufferLength);
    }

    TryCatch try_catch;

    data->cb->Call(Context::GetCurrent()->Global(), 2, args);
    data->cb.Dispose();

    if (try_catch.HasCaught()) {
      FatalException(try_catch);
    }
  }
  else {
    ODBC::FreeColumns(data->objResult->columns, &data->objResult->colCount);

    Handle<Value> args[2];


    if (error) {
      args[0] = objError;
    }
    else {
      args[0] = Null();
    }

    args[1] = Null();

    TryCatch try_catch;

    data->cb->Call(Context::GetCurrent()->Global(), 2, args);
    data->cb.Dispose();

    if (try_catch.HasCaught()) {
      FatalException(try_catch);
    }
  }

  data->objResult->Unref();

  free(data);
  free(work_req);

  return;
}





Handle<Value> ODBCResult::FetchSync(const Arguments& args) {
  (void)0;

  HandleScope scope;

  ODBCResult* objResult = ObjectWrap::Unwrap<ODBCResult>(args.Holder());

  Local<Object> objError;
  bool moreWork = true;
  bool error = false;
  int fetchMode = objResult->m_fetchMode;

  if (args.Length() == 1 && args[0]->IsObject()) {
    Local<Object> obj = args[0]->ToObject();

    if (obj->Has(OPTION_FETCH_MODE) && obj->Get(OPTION_FETCH_MODE)->IsInt32()) {
      fetchMode = obj->Get(OPTION_FETCH_MODE)->ToInt32()->Value();
    }
  }

  SQLRETURN ret = SQLFetch(objResult->m_hSTMT);

  if (objResult->colCount == 0) {
    objResult->columns = ODBC::GetColumns(
      objResult->m_hSTMT,
      &objResult->colCount);
  }


  if (objResult->colCount == 0) {
    moreWork = false;
  }

  else if (ret == (-1)) {
    moreWork = false;
    error = true;

    objError = ODBC::GetSQLError(
      3,
      objResult->m_hSTMT,
      (char *) "Error in ODBCResult::UV_AfterFetch");
  }

  else if (ret == 100) {
    moreWork = false;
  }

  if (moreWork) {
    Handle<Value> data;

    if (fetchMode == 3) {
      data = ODBC::GetRecordArray(
        objResult->m_hSTMT,
        objResult->columns,
        &objResult->colCount,
        objResult->buffer,
        objResult->bufferLength);
    }
    else {
      data = ODBC::GetRecordTuple(
        objResult->m_hSTMT,
        objResult->columns,
        &objResult->colCount,
        objResult->buffer,
        objResult->bufferLength);
    }

    return scope.Close(data);
  }
  else {
    ODBC::FreeColumns(objResult->columns, &objResult->colCount);


    if (error) {
      ThrowException(objError);

      return scope.Close(Null());
    }
    else {
      return scope.Close(Null());
    }
  }
}





Handle<Value> ODBCResult::FetchAll(const Arguments& args) {
  (void)0;

  HandleScope scope;

  ODBCResult* objODBCResult = ObjectWrap::Unwrap<ODBCResult>(args.Holder());

  uv_work_t* work_req = (uv_work_t *) (calloc(1, sizeof(uv_work_t)));

  fetch_work_data* data = (fetch_work_data *) calloc(1, sizeof(fetch_work_data));

  Local<Function> cb;

  data->fetchMode = objODBCResult->m_fetchMode;

  if (args.Length() == 1 && args[0]->IsFunction()) {
    cb = Local<Function>::Cast(args[0]);
  }
  else if (args.Length() == 2 && args[0]->IsObject() && args[1]->IsFunction()) {
    cb = Local<Function>::Cast(args[1]);

    Local<Object> obj = args[0]->ToObject();

    if (obj->Has(OPTION_FETCH_MODE) && obj->Get(OPTION_FETCH_MODE)->IsInt32()) {
      data->fetchMode = obj->Get(OPTION_FETCH_MODE)->ToInt32()->Value();
    }
  }
  else {
    return ThrowException(Exception::TypeError(
      String::New("ODBCResult::FetchAll(): 1 or 2 arguments are required. The last argument must be a callback function.")
    ));
  }

  data->rows = Persistent<Array>::New(Array::New());
  data->errorCount = 0;
  data->count = 0;
  data->objError = Persistent<Object>::New(Object::New());

  data->cb = Persistent<Function>::New(cb);
  data->objResult = objODBCResult;

  work_req->data = data;

  uv_queue_work(uv_default_loop(),
    work_req,
    UV_FetchAll,
    (uv_after_work_cb)UV_AfterFetchAll);

  data->objResult->Ref();

  return scope.Close(Undefined());
}

void ODBCResult::UV_FetchAll(uv_work_t* work_req) {
  (void)0;

  fetch_work_data* data = (fetch_work_data *)(work_req->data);

  data->result = SQLFetch(data->objResult->m_hSTMT);
 }

void ODBCResult::UV_AfterFetchAll(uv_work_t* work_req, int status) {
  (void)0;

  HandleScope scope;

  fetch_work_data* data = (fetch_work_data *)(work_req->data);

  ODBCResult* self = data->objResult->self();

  bool doMoreWork = true;

  if (self->colCount == 0) {
    self->columns = ODBC::GetColumns(self->m_hSTMT, &self->colCount);
  }


  if (self->colCount == 0) {


    doMoreWork = false;
  }

  else if (data->result == (-1)) {
    data->errorCount++;

    data->objError = Persistent<Object>::New(ODBC::GetSQLError(
      3,
      self->m_hSTMT,
      (char *) "[node-odbc] Error in ODBCResult::UV_AfterFetchAll"
    ));

    doMoreWork = false;
  }

  else if (data->result == 100) {
    doMoreWork = false;
  }
  else {
    if (data->fetchMode == 3) {
      data->rows->Set(
        Integer::New(data->count),
        ODBC::GetRecordArray(
          self->m_hSTMT,
          self->columns,
          &self->colCount,
          self->buffer,
          self->bufferLength)
      );
    }
    else {
      data->rows->Set(
        Integer::New(data->count),
        ODBC::GetRecordTuple(
          self->m_hSTMT,
          self->columns,
          &self->colCount,
          self->buffer,
          self->bufferLength)
      );
    }
    data->count++;
  }

  if (doMoreWork) {

    uv_queue_work(
      uv_default_loop(),
      work_req,
      UV_FetchAll,
      (uv_after_work_cb)UV_AfterFetchAll);
  }
  else {
    ODBC::FreeColumns(self->columns, &self->colCount);

    Handle<Value> args[2];

    if (data->errorCount > 0) {
      args[0] = Local<Object>::New(data->objError);
    }
    else {
      args[0] = Null();
    }

    args[1] = Local<Array>::New(data->rows);

    TryCatch try_catch;

    data->cb->Call(Context::GetCurrent()->Global(), 2, args);
    data->cb.Dispose();
    data->rows.Dispose();
    data->objError.Dispose();

    if (try_catch.HasCaught()) {
      FatalException(try_catch);
    }


    free(data);
    free(work_req);

    self->Unref();
  }

  scope.Close(Undefined());
}





Handle<Value> ODBCResult::FetchAllSync(const Arguments& args) {
  (void)0;

  HandleScope scope;

  ODBCResult* self = ObjectWrap::Unwrap<ODBCResult>(args.Holder());

  Local<Object> objError = Object::New();

  SQLRETURN ret;
  int count = 0;
  int errorCount = 0;
  int fetchMode = self->m_fetchMode;

  if (args.Length() == 1 && args[0]->IsObject()) {
    Local<Object> obj = args[0]->ToObject();

    if (obj->Has(OPTION_FETCH_MODE) && obj->Get(OPTION_FETCH_MODE)->IsInt32()) {
      fetchMode = obj->Get(OPTION_FETCH_MODE)->ToInt32()->Value();
    }
  }

  if (self->colCount == 0) {
    self->columns = ODBC::GetColumns(self->m_hSTMT, &self->colCount);
  }

  Local<Array> rows = Array::New();


  if (self->colCount > 0) {

    while (true) {
      ret = SQLFetch(self->m_hSTMT);


      if (ret == (-1)) {
        errorCount++;

        objError = ODBC::GetSQLError(
          3,
          self->m_hSTMT,
          (char *) "[node-odbc] Error in ODBCResult::UV_AfterFetchAll; probably"
            " your query did not have a result set."
        );

        break;
      }


      if (ret == 100) {
        ODBC::FreeColumns(self->columns, &self->colCount);

        break;
      }

      if (fetchMode == 3) {
        rows->Set(
          Integer::New(count),
          ODBC::GetRecordArray(
            self->m_hSTMT,
            self->columns,
            &self->colCount,
            self->buffer,
            self->bufferLength)
        );
      }
      else {
        rows->Set(
          Integer::New(count),
          ODBC::GetRecordTuple(
            self->m_hSTMT,
            self->columns,
            &self->colCount,
            self->buffer,
            self->bufferLength)
        );
      }
      count++;
    }
  }
  else {
    ODBC::FreeColumns(self->columns, &self->colCount);
  }


  if (errorCount > 0) {
    ThrowException(objError);
  }

  return scope.Close(rows);
}






Handle<Value> ODBCResult::CloseSync(const Arguments& args) {
  (void)0;

  HandleScope scope;

  int closeOption; if (args.Length() <= (0)) { closeOption = (9999); } else if (args[0]->IsInt32()) { closeOption = args[0]->Int32Value(); } else { return ThrowException(Exception::TypeError( String::New("Argument " "0" " must be an integer"))); };

  ODBCResult* result = ObjectWrap::Unwrap<ODBCResult>(args.Holder());

  (void)0
                                                    ;

  if (closeOption == 9999 && result->m_canFreeHandle) {
    result->Free();
  }
  else if (closeOption == 9999 && !result->m_canFreeHandle) {

    uv_mutex_lock(&ODBC::g_odbcMutex);

    SQLFreeStmt(result->m_hSTMT, 0);

    uv_mutex_unlock(&ODBC::g_odbcMutex);
  }
  else {
    uv_mutex_lock(&ODBC::g_odbcMutex);

    SQLFreeStmt(result->m_hSTMT, closeOption);

    uv_mutex_unlock(&ODBC::g_odbcMutex);
  }

  return scope.Close(True());
}

Handle<Value> ODBCResult::MoreResultsSync(const Arguments& args) {
  (void)0;

  HandleScope scope;

  ODBCResult* result = ObjectWrap::Unwrap<ODBCResult>(args.Holder());

  SQLRETURN ret = SQLMoreResults(result->m_hSTMT);

  if (ret == (-1)) {
    ThrowException(ODBC::GetSQLError(3, result->m_hSTMT, (char *)"[node-odbc] Error in ODBCResult::MoreResultsSync"));
  }

  return scope.Close((((ret)&(~1))==0) || ret == (-1) ? True() : False());
}





Handle<Value> ODBCResult::GetColumnNamesSync(const Arguments& args) {
  (void)0;

  HandleScope scope;

  ODBCResult* self = ObjectWrap::Unwrap<ODBCResult>(args.Holder());

  Local<Array> cols = Array::New();

  if (self->colCount == 0) {
    self->columns = ODBC::GetColumns(self->m_hSTMT, &self->colCount);
  }

  for (int i = 0; i < self->colCount; i++) {
    cols->Set(Integer::New(i),
              String::New((const char *) self->columns[i].name));
  }

  return scope.Close(cols);
}
